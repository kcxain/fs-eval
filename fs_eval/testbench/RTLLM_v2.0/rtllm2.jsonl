{"task_id": "up_down_counter", "prompt": "Please act as a professional Verilog designer.\n\nModule name: \n    up_down_counter\n\nFunction:\n    A 16-bit counter that can increment or decrement based on control signals.\n\nInput ports:\n    clk: Clock signal (1-bit), used to synchronize the counting process.\n    reset: Reset signal (1-bit), used to reset the counter to zero.\n    up_down: Control signal (1-bit), determines the counting direction. \n             If up_down = 1, the counter increments; if up_down = 0, it decrements.\n\nOutput ports:\n    count [15:0]: 16-bit output representing the current counter value.\n\nImplementation:\n    The module uses a synchronous process triggered by the rising edge of the clock signal (`clk`).\n    If the reset signal (`reset`) is active, the counter resets to zero.\n    If the `up_down` control signal is high, the counter increments on each clock cycle.\n    If the `up_down` control signal is low, the counter decrements on each clock cycle.\n    The `count` output reflects the current value of the counter, which can range from 0 to 65535.\n\nGive me the complete code.", "gloden_code": "module up_down_counter (\n    input wire clk,\n    input wire reset,\n    input wire up_down,\n    output reg [15:0] count\n);\n\nalways @(posedge clk or posedge reset)\nbegin\n    if (reset) begin\n        count <= 16'b0; \n    end else begin\n        if (up_down) begin\n            // Increment the counter if up_down is high\n            if (count == 16'b1111_1111_1111_1111) begin\n                count <= 16'b0; \n            end else begin\n                count <= count + 1; \n            end\n        end else begin\n            // Decrement the counter if up_down is low\n            if (count == 16'b0) begin\n                count <= 16'b1111_1111_1111_1111; \n            end else begin\n                count <= count - 1; \n            end\n        end\n    end\nend\n\nendmodule"}
{"task_id": "counter_12", "prompt": "Please act as a professional verilog designer.\n\nImplement a module of a counter design that requires counting from 4 'b0000 to 4' d11. The counting can be controlled by the input signal valid_count. That is, the count is paused if valid_count is 0. The counter increments on each clock cycle when the valid_count signal is active and resets to 0 when the reset signal (rst_n) is active.\n\nModule name:  \n    counter_12               \nInput ports:\n    rst_n: Reset signal (active low)\n    clk: Clock signal\n    valid_count: Signal to enable counting\nOutput ports:\n    out: 4-bit output representing the current count value\n\nImplementation:\nIf the reset signal is active (!rst_n), the counter is reset to 0 by assigning the value 4'b0000 to the output register (out). If the valid_count signal is 1, the counter increments. It checks if the current count value (out) is equal to 4'd11 (maximum count value). If it is, the counter wraps around and resets to 0 by assigning the value 4'b0000 to the output register (out). Otherwise, it increments the output register by 1. If the valid_count = 0, the counter will stop, and the output register (out) remains unchanged.\n\nGive me the complete code.", "gloden_code": "`timescale 1ns/1ps\nmodule verified_counter_12 \n(\n  input rst_n,\n  input clk,\n  input valid_count,\n\n  output reg [3:0] out\n);\n\n  always @(posedge clk or negedge rst_n) begin\n    if (!rst_n) \n\tbegin\n      out <= 4'b0000;\n    end \n\n\telse if (valid_count) \n\tbegin\n      if (out == 4'd11) \n\t  begin\n        out <= 4'b0000;\n      end \n\t  else begin\n        out <= out + 1;\n      end\n    end \n\t\n\telse begin\n      out <= out; // Pause the count when valid_count is invalid\n    end\n  end\n\nendmodule"}
{"task_id": "JC_counter", "prompt": "Please act as a professional verilog designer.\n\nImplement a 64-bit Johnson counter (torsional ring counter), and the state of the similar 4-bit Johnson counter example is as follows: 0000, 1000, 1100, 1110, 1111, 0111, 0011, 0001, 0000.\n\nModule name:  \n    JC_counter               \nInput ports:\n    clk: Clock signal used for synchronous operation.\n    rst_n: Active-low reset signal to initialize the counter.\nOutput port:\n    Q: 64-bit register representing the current count value.\n\nImplementation:\nOn every rising edge of the clock signal (clk) or the falling edge of the reset signal (rst_n), the counter value is updated.\nIf the reset signal (rst_n) is low, indicating a reset condition, the counter value (Q) is set to 0.\nOtherwise, if the least significant bit (Q[0]) is 0, the counter increments by shifting the current value (Q[63:1]) to the right and appending a 1 at the most significant bit position.\nIf the least significant bit (Q[0]) is 1, the counter decrements by shifting the current value (Q[63:1]) to the right and appending a 0 at the most significant bit position.\n\nGive me the complete code.", "gloden_code": "`timescale 1ns/1ns\n\nmodule verified_JC_counter(\n   input                clk ,\n   input                rst_n,\n \n   output reg [63:0]     Q  \n);\n    always@(posedge clk or negedge rst_n)begin\n        if(!rst_n) Q <= 'd0;\n        else if(!Q[0]) Q <= {1'b1, Q[63 : 1]};\n        else Q <= {1'b0, Q[63 : 1]};\n    end\nendmodule"}
{"task_id": "ring_counter", "prompt": "Please act as a professional Verilog designer.\n\nImplement a module of an 8-bit ring counter for cyclic state sequences.\n\nModule name:\nring_counter\n\nInput ports:\n        clk: Clock signal that drives the state transitions of the ring counter.\n        reset: Reset signal to initialize the counter to its starting state.\n\nOutput ports:\n        out [7:0]: 8-bit output representing the current state of the ring counter. Only one bit is set high at any time, and the set bit cycles through the 8-bit output.\n\nInternal logic:\n1. State Transition: The ring counter follows a cyclic pattern where exactly one bit is set to 1 in the output at any given time, and the 1 shifts to the next bit with each clock pulse.\n   \n2. Initialization: When the reset signal is high, the counter is initialized to its starting state, typically with the least significant bit (LSB) of out set to 1 (i.e., out = 8'b0000_0001).\n\n3. Cycling Behavior: On each rising edge of the clock signal, the 1 shifts to the next bit in the sequence, and after reaching the most significant bit (MSB), it wraps around to the LSB, creating a cyclic sequence.\n\nReset Behavior: When reset is high, the ring counter is reset to its initial state (out = 8'b0000_0001).\n\nGive me the complete code.", "gloden_code": "module ring_counter (\n    input wire clk,\n    input wire reset,\n    output reg [7:0] out\n);\n\n\nreg [7:0] state;\n\n// State initialization\nalways @ (posedge clk or posedge reset)\nbegin\n    if (reset)\n        state <= 8'b0000_0001; \n    else\n        state <= {state[6:0], state[7]}; \nend\n\nassign out = state;\n\nendmodule"}
{"task_id": "fsm", "prompt": "Please act as a professional verilog designer.\n\nImplement a Mealy FSM detection circuit that detects a single-bit input IN. When the input is 10011, output MATCH is 1, and MATCH is 0 in other cases. Support for continuous input and loop detection. \n\nModule name:  \n    fsm               \nInput ports:\n    IN: Input signal to the FSM.\n    CLK: Clock signal used for synchronous operation.\n    RST: Reset signal to initialize the FSM.\nOutput ports:\n    MATCH: Output signal indicating a match condition based on the FSM state.\n\nImplementation:\nThe module implements an FSM detection.\nOn every change in the input signal (IN) or positive edge of CLK or RST, if RST is active, the output signal MATCH is set to 0.\nIf the sequence of inputs IN is 1, 0, 0, 1, 1, the MATCH signal is 1 at the same time as the last occurrence of IN=1. If the sequence of inputs IN is 1, 0, 0, 1, 1, 0, 0, 1, 1, the MATCH signal becomes 1 at the fifth and ninth of IN; otherwise, it is set to 0.\n\nGive me the complete code.", "gloden_code": "module verified_fsm(IN,MATCH,CLK,RST);\ninput IN,CLK,RST;\noutput reg MATCH;\n\nreg [2:0] ST_cr,ST_nt;\n\nparameter s0 = 3'b000;\nparameter s1 = 3'b001;\nparameter s2 = 3'b010;\nparameter s3 = 3'b011;\nparameter s4 = 3'b100;\nparameter s5 = 3'b101;\n\nalways@(posedge CLK or posedge RST) begin\n\tif(RST)\n\t\tST_cr <= s0;\n\telse\n\t\tST_cr <= ST_nt;\nend\n\nalways@(*) begin\n\tcase(ST_cr)\n\t\ts0:begin\n\t\t\tif (IN==0)\n\t\t\t\tST_nt = s0;\n\t\t\telse\n\t\t\t\tST_nt = s1;\n\t\tend\n\t\t\n\t\ts1:begin\n                        if (IN==0)\n                                ST_nt = s2;\n                        else\n                                ST_nt = s1;\n                end\n\n                s2:begin\n                        if (IN==0)\n                                ST_nt = s3;\n                        else\n                                ST_nt = s1;\n                end\n\n                s3:begin\n                        if (IN==0)\n                                ST_nt = s0;\n                        else\n                                ST_nt = s4;\n                end\n\n                s4:begin\n                        if (IN==0)\n                                ST_nt = s2;\n                        else\n                                ST_nt = s5;\n                end\n\n                s5:begin\n                        if (IN==0)\n                                ST_nt = s2;\n                        else\n                                ST_nt = s1;\n                end\n\n\tendcase\nend\n\nalways@(*) begin\n        if(RST)\n                MATCH  <= 0;\n        else if (ST_cr == s4 && IN == 1)\n                MATCH  <= 1;\n\telse \n\t\tMATCH  <= 0;\nend\n\nendmodule"}
{"task_id": "sequence_detector", "prompt": "Please act as a professional Verilog designer.\n\nImplement a module of a sequence detector to detect a specific 4-bit binary sequence 1001.\n\nModule name:\n    sequence_detector\n\nInput ports:\n    clk: Clock signal to synchronize the detector.\n    reset_n: Reset signal to initialize the state machine.\n    data_in: 1-bit binary input signal to feed the bitstream for sequence detection.\n\nOutput ports:\n    sequence_detected: 1-bit output signal that is set high when the specific sequence is detected.\n    \nInternal logic:\n    State Machine: The sequence detector uses a finite state machine (FSM) with the following states:\n    IDLE: Waiting for the start of the sequence.\n    S1: The first bit of the desired sequence is detected.\n    S2: The second bit of the desired sequence is detected.\n    S3: The third bit of the desired sequence is detected.\n    S4: The fourth and final bit of the desired sequence is detected, and the output sequence_detected is set high.\n\nImplementation:\n    -FSM Design: The FSM transitions through states based on the bitstream data_in. On each clock cycle, the detector checks for a match of the specific sequence.\n\n    -Sequence Detection: The module checks the input data_in and transitions between states. Once the complete sequence is detected, sequence_detected is asserted.\n\n    -Reset Behavior: When reset is high, the state machine returns to the IDLE state, resetting the detection process.", "gloden_code": "module sequence_detector(\n     input  clk, \n     input  rst_n,\n     input  data_in, \n     output sequence_detected\t\t\t\t\n     );\n\n       \nparameter        IDLE = 5'b00001;\nparameter        S1   = 5'b00010;\nparameter \t     S2   = 5'b00100;\nparameter        S3   = 5'b01000;\nparameter        S4   = 5'b10000; \n\n\nreg [4:0]\t\t curr_state;\nreg [4:0] \t\t next_state;\n\n\nalways@(posedge clk or negedge rst_n) begin\n    if(!rst_n) begin\n\t    curr_state <= IDLE;\n    end\n    else begin\n\t    curr_state <= next_state;\n    end\nend\n\n\nalways@(*) begin\n    if(!rst_n) begin\n\t    next_state <= IDLE;\n    end\n    else begin\n\t    case(curr_state)\n\t        IDLE  :next_state = data_in?S1:IDLE;\n\t        S1\t  :next_state = data_in?S1:S2;\n\t        S2\t  :next_state = data_in?S1:S3;\n\t        S3\t  :next_state = data_in?S4:IDLE;\n\t        S4\t  :next_state = data_in?S1:S2;\n\t        default:next_state = IDLE;\t\n\t    endcase\n    end\nend\n\nassign sequence_detected = (curr_state ==S4) ? 1'b1 : 1'b0;\n\nendmodule"}
{"task_id": "LFSR", "prompt": "Please act as a professional Verilog designer.\n\nA Linear Feedback Shift Register (LFSR) designed for generating pseudo-random sequences. This 4-bit LFSR uses a specific feedback mechanism to produce a sequence of bits that appears random.\n\nModule name:\n    LFSR\n\nInput ports:\n    clk: Clock signal to synchronize the shifting operation.\n    rst: Active high reset signal to initialize the register.\n\nOutput ports:\n    out [3:0]: 4-bit output representing the current state of the LFSR.\n\nImplementation:\nThe LFSR operates on the principle of shifting bits and applying feedback based on the XOR of specific bits in the register.\nThe feedback is calculated by XORing the most significant bit (out[3]) and the second most significant bit (out[2]). The result is inverted to produce the feedback signal.\nOn the rising edge of the clock (clk), if the reset (rst) is high, the register is initialized to zero. Otherwise, the bits in the register are shifted left, and the new feedback value is inserted at the least significant bit (LSB).", "gloden_code": "module LFSR (out, clk, rst);\n  input clk, rst;\n  output reg [3:0] out;\n  wire feedback;\n\n  assign feedback = ~(out[3] ^ out[2]);\n\nalways @(posedge clk, posedge rst)\n  begin\n    if (rst)\n      out = 4'b0;\n    else\n      out = {out[2:0],feedback};\n  end\nendmodule"}
{"task_id": "right_shifter", "prompt": "Please act as a professional verilog designer.\n\nImplement a right shifter. The module performs an 8-bit right shift on a 1-bit input by first initializing the q register to 0. On each rising edge of the clock, the module shifts the contents of the q register to the right by one bit and inserts the new input bit d into the most significant position of the register.\n\nModule name:  \n    right_shifter    \n\nInput ports:\n    clk: Clock signal used for synchronous operation.\n    d: Input signal to be right-shifted.\n\nOutput ports:\n    q: Output signal representing the result of the right shift operation.\n\nImplementation:\nThe register is defined as reg [7:0] q and initialized to 0 using the initial statement. The value of q is right-shifted by 1 bit using the >> operator: q <= (q >> 1).\nThe most significant bit (q[7]) of the register is assigned the value of the input signal (d): q[7] <= d.\n\nGive me the complete code.", "gloden_code": "module verified_right_shifter(clk, q,d);  \n\n    input  clk;  \n    input d;  \n    output  [7:0] q;  \n    reg   [7:0]  q; \n    initial q = 0;\n\n    always @(posedge clk)\n          begin\n            q <= (q >> 1);\n            q[7] <= d;\n          end  \n\nendmodule"}
{"task_id": "barrel_shifter", "prompt": "Please act as a professional verilog designer.\n\nModule name: \n    barrel_shifter\n\nFunction:\n    A barrel shifter for rotating bits efficiently. This 8-bit barrel shifter takes an 8-bit input and shifts or rotates the bits based on a 3-bit control signal.\n\nInput ports:\n    in [7:0]: 8-bit input to be shifted.\n    ctrl [2:0]: 3-bit control signal that determines how many positions to shift. The control signal specifies the amount of shift, where each bit indicates a shift by 1, 2, or 4 positions.\n\nOutput ports:\n    out [7:0]: 8-bit shifted output.\n\nImplementation:\n    The barrel shifter shifts the input `in` based on the value of the `ctrl` signal. The shifting happens in stages, where each stage shifts by 4, 2, or 1 position, as controlled by `ctrl[2]`, `ctrl[1]`, and `ctrl[0]`, respectively.\n    The shifts are achieved using a series of 2-to-1 multiplexers (`mux2X1`) that select between the shifted input and the original input. Each stage of multiplexers performs the shift, and the result is passed to the next stage for further shifting if required.\n    - When `ctrl[2]` is high, the input is shifted by 4 positions.\n    - When `ctrl[1]` is high, the intermediate result is shifted by 2 positions.\n    - When `ctrl[0]` is high, the intermediate result is shifted by 1 position.\n    \n    The `mux2X1` submodule is used to select between two input values based on the `sel` signal, determining which bit is used in the shifted output at each stage.\n\nGive me the complete code.", "gloden_code": "module barrel_shifter (in, ctrl, out);\n  input  [7:0] in;\n  input [2:0] ctrl;\n  output [7:0] out;\n  wire [7:0] x,y;\n \n//4bit shift right\nmux2X1  ins_17 (.in0(in[7]),.in1(1'b0),.sel(ctrl[2]),.out(x[7]));\nmux2X1  ins_16 (.in0(in[6]),.in1(1'b0),.sel(ctrl[2]),.out(x[6]));\nmux2X1  ins_15 (.in0(in[5]),.in1(1'b0),.sel(ctrl[2]),.out(x[5]));\nmux2X1  ins_14 (.in0(in[4]),.in1(1'b0),.sel(ctrl[2]),.out(x[4]));\nmux2X1  ins_13 (.in0(in[3]),.in1(in[7]),.sel(ctrl[2]),.out(x[3]));\nmux2X1  ins_12 (.in0(in[2]),.in1(in[6]),.sel(ctrl[2]),.out(x[2]));\nmux2X1  ins_11 (.in0(in[1]),.in1(in[5]),.sel(ctrl[2]),.out(x[1]));\nmux2X1  ins_10 (.in0(in[0]),.in1(in[4]),.sel(ctrl[2]),.out(x[0]));\n \n//2 bit shift right\n \nmux2X1  ins_27 (.in0(x[7]),.in1(1'b0),.sel(ctrl[1]),.out(y[7]));\nmux2X1  ins_26 (.in0(x[6]),.in1(1'b0),.sel(ctrl[1]),.out(y[6]));\nmux2X1  ins_25 (.in0(x[5]),.in1(x[7]),.sel(ctrl[1]),.out(y[5]));\nmux2X1  ins_24 (.in0(x[4]),.in1(x[6]),.sel(ctrl[1]),.out(y[4]));\nmux2X1  ins_23 (.in0(x[3]),.in1(x[5]),.sel(ctrl[1]),.out(y[3]));\nmux2X1  ins_22 (.in0(x[2]),.in1(x[4]),.sel(ctrl[1]),.out(y[2]));\nmux2X1  ins_21 (.in0(x[1]),.in1(x[3]),.sel(ctrl[1]),.out(y[1]));\nmux2X1  ins_20 (.in0(x[0]),.in1(x[2]),.sel(ctrl[1]),.out(y[0]));\n \n//1 bit shift right\nmux2X1  ins_07 (.in0(y[7]),.in1(1'b0),.sel(ctrl[0]),.out(out[7]));\nmux2X1  ins_06 (.in0(y[6]),.in1(y[7]),.sel(ctrl[0]),.out(out[6]));\nmux2X1  ins_05 (.in0(y[5]),.in1(y[6]),.sel(ctrl[0]),.out(out[5]));\nmux2X1  ins_04 (.in0(y[4]),.in1(y[5]),.sel(ctrl[0]),.out(out[4]));\nmux2X1  ins_03 (.in0(y[3]),.in1(y[4]),.sel(ctrl[0]),.out(out[3]));\nmux2X1  ins_02 (.in0(y[2]),.in1(y[3]),.sel(ctrl[0]),.out(out[2]));\nmux2X1  ins_01 (.in0(y[1]),.in1(y[2]),.sel(ctrl[0]),.out(out[1]));\nmux2X1  ins_00 (.in0(y[0]),.in1(y[1]),.sel(ctrl[0]),.out(out[0]));\n\nendmodule\n\nmodule mux2X1( in0,in1,sel,out);\ninput in0,in1;\ninput sel;\noutput out;\nassign out=(sel)?in1:in0;\nendmodule"}
{"task_id": "asyn_fifo", "prompt": "Please act as a professional verilog designer.\n\nImplement an asynchronous FIFO, FIFO bit width and depth can be configured(parameter DEPTH = 16, parameter WIDTH = 8). The asynchronous FIFO structure is divided into several parts. The first part is dual-port RAM, which is used for data storage. Instantiate dual-port RAM as a submodule, The RAM ports are input wclk, input wenc, input [$clog2(DEPTH)-1:0] waddr, input [WIDTH-1:0] wdata, input rclk, input renc, input [$clog2(DEPTH)-1:0] raddr, output reg [WIDTH-1:0] rdata. The second part is the data write controller. The third part is the data read controller. The fourth part is the read pointer synchronizer. The read pointer is collected using the two-stage trigger of the write clock and output to the data write controller. The fifth part is the write pointer synchronizer, which uses the two-stage trigger of the read clock to collect the write pointer and output it to the data read controller.\nThe method of empty and full judgment is to generate empty and full signals by comparing the Gray code. Use 4-bit Gray code as a read/write pointer for a FIFO with depth 8. The gray code is converted to a four-digit binary number, using the lower three digits of the binary number as the address to access RAM. When the read and write Pointers are equal, the FIFO is null.\nWhen the write pointer has one more cycle RAM than the read pointer, the highest and second-highest bits of the read and write pointer are opposite, the remaining bits are the same, and the FIFO is full.\n\nModule name:  \n    asyn_fifo  \n\nInput ports:\n\twclk: Write clock signal used for synchronous write operations.\n\trclk: Read clock signal used for synchronous read operations.\n\twrstn: Write reset signal. Defined as 0 for reset and 1 for reset signal inactive.\n\trrstn: Read reset signal. Defined as 0 for reset and 1 for reset signal inactive.\n\twinc: Write increment signal. Used to trigger write operations.\n\trinc: Read increment signal. Used to trigger read operations.\n\twdata: Write data input. The width [WIDTH-1:0] is configurable and represents the data to be written into the FIFO.\n\nOutput ports:\nwfull: Write full signal. Indicates if the FIFO is full and cannot accept further write operations.\nrempty: Read empty signal. Indicates if the FIFO is empty and cannot provide any data for read operations.\nrdata: Read data output. The width [WIDTH-1:0] is configurable and represents the data read from the FIFO.\n\nParameter:\n\tWIDTH = 8\n\tDEPTH = 16\n\nImplementation:\nThe module implements an asynchronous FIFO using a dual-port RAM module and additional logic for managing read and write pointers.\nDual-port RAM:\nThe module instantiates a dual-port RAM module named \"dual_port_RAM\" with configurable depth and width.\nThe RAM module has separate clock inputs for write (wclk) and read (rclk) operations.\nThe RAM module has separate address inputs for write (waddr) and read (raddr) operations.\nThe RAM module has a write enable input (wenc) and a write data input (wdata).\nThe RAM module has a read enable input (renc) and a read data output (rdata).\nThe RAM module stores data in a two-dimensional array, RAM_MEM, with a size of DEPTH by WIDTH.\nWrite and Read Pointers:\nThe module includes logic to manage write and read pointers for asynchronous operation.\nThe write and read pointers are represented by binary registers, waddr_bin and raddr_bin, respectively.\nThe write and read pointers are incremented based on the write and read increment signals (winc and rinc), respectively.\nThe write pointer is incremented on the positive edge of the write clock (posedge wclk) and reset to 0 on write reset (~wrstn).\nThe read pointer is incremented on the positive edge of the read clock (posedge rclk) and reset to 0 on read reset (~rrstn).\nGray Code Conversion:\nThe write and read pointers are converted to Gray code using XOR operations with right-shifted values.\nThe converted write and read pointers are stored in registers wptr and rptr, respectively.\nThe Gray code conversion reduces glitches and ensures proper synchronization of the write and read pointers.\nPointer Buffers:\nThe module includes buffer registers (wptr_buff and rptr_buff) to hold the previous values of the write and read pointers.\nThe buffer registers are updated on the positive edge of the respective clocks and reset to 0 on the respective resets (~wrstn and ~rrstn).\nThe buffer registers are used to synchronize the write and read pointers for determining the full and empty conditions.\nFull and Empty Signals:\nThe module compares the current write and read pointers (wptr and rptr_syn) to determine if the FIFO is full or empty.\nThe wfull output is set to 1 when the write pointer is equal to the bitwise negation of the most significant bit of the read pointer concatenated with the remaining bits of the read pointer.\nThe rempty output is set to 1 when the read pointer is equal to the write pointer.\nInput and Output Connections:\nThe module connects the input and output signals to the dual-port RAM module based on the control signals and pointer values.\nThe wen and ren signals control the write and read enable signals of the RAM module, respectively.\nThe wdata input is connected to the write data input (wdata) of the RAM module.\nThe rdata output is connected to the read data output (rdata) of the RAM module.\n\nGive me the complete code.", "gloden_code": "`timescale 1ns/1ns\n\n/***************************************RAM*****************************************/\nmodule dual_port_RAM #(parameter DEPTH = 16,  parameter WIDTH = 8)\n(\n\t input wclk\t,\n\t input wenc\t,\n\t input [$clog2(DEPTH)-1:0] waddr  ,\n\t input [WIDTH-1:0] wdata ,\n\t input rclk\t,\n\t input renc\t,\n\t input [$clog2(DEPTH)-1:0] raddr ,\n\t output reg [WIDTH-1:0] rdata \t\t\n);\n\nreg [WIDTH-1:0] RAM_MEM [0:DEPTH-1];\n\nalways @(posedge wclk) begin\n\tif(wenc)\n\t\tRAM_MEM[waddr] <= wdata;\nend \n\nalways @(posedge rclk) begin\n\tif(renc)\n\t\trdata <= RAM_MEM[raddr];\nend \n\nendmodule  \n\n\n/**************************************AFIFO*****************************************/\nmodule verified_asyn_fifo#(\n\tparameter\tWIDTH = 8,\n\tparameter \tDEPTH = 16\n)(\n\tinput \t\t\t\t\twclk\t, \n\tinput \t\t\t\t\trclk\t,   \n\tinput \t\t\t\t\twrstn\t,\n\tinput\t\t\t\t\trrstn\t,\n\tinput \t\t\t\t\twinc\t,\n\tinput \t\t\t \t\trinc\t,\n\tinput \t\t[WIDTH-1:0]\twdata\t,\n\n\toutput wire\t\t\t\twfull\t,\n\toutput wire\t\t\t\trempty\t,\n\toutput wire [WIDTH-1:0]\trdata\n);\n\nparameter ADDR_WIDTH = $clog2(DEPTH);\n\n\nreg \t[ADDR_WIDTH:0]\twaddr_bin;\nreg \t[ADDR_WIDTH:0]\traddr_bin;\n\nalways @(posedge wclk or negedge wrstn) begin\n\tif(~wrstn) begin\n\t\twaddr_bin <= 'd0;\n\tend \n\telse if(!wfull && winc)begin\n\t\twaddr_bin <= waddr_bin + 1'd1;\n\tend\nend\nalways @(posedge rclk or negedge rrstn) begin\n\tif(~rrstn) begin\n\t\traddr_bin <= 'd0;\n\tend \n\telse if(!rempty && rinc)begin\n\t\traddr_bin <= raddr_bin + 1'd1;\n\tend\nend\n\nwire \t[ADDR_WIDTH:0]\twaddr_gray;\nwire \t[ADDR_WIDTH:0]\traddr_gray;\nreg \t[ADDR_WIDTH:0]\twptr;\nreg \t[ADDR_WIDTH:0]\trptr;\nassign waddr_gray = waddr_bin ^ (waddr_bin>>1);\nassign raddr_gray = raddr_bin ^ (raddr_bin>>1);\nalways @(posedge wclk or negedge wrstn) begin \n\tif(~wrstn) begin\n\t\twptr <= 'd0;\n\tend \n\telse begin\n\t\twptr <= waddr_gray;\n\tend\nend\nalways @(posedge rclk or negedge rrstn) begin \n\tif(~rrstn) begin\n\t\trptr <= 'd0;\n\tend \n\telse begin\n\t\trptr <= raddr_gray;\n\tend\nend\n\nreg\t\t[ADDR_WIDTH:0]\twptr_buff;\nreg\t\t[ADDR_WIDTH:0]\twptr_syn;\nreg\t\t[ADDR_WIDTH:0]\trptr_buff;\nreg\t\t[ADDR_WIDTH:0]\trptr_syn;\nalways @(posedge wclk or negedge wrstn) begin \n\tif(~wrstn) begin\n\t\trptr_buff <= 'd0;\n\t\trptr_syn <= 'd0;\n\tend \n\telse begin\n\t\trptr_buff <= rptr;\n\t\trptr_syn <= rptr_buff;\n\tend\nend\nalways @(posedge rclk or negedge rrstn) begin \n\tif(~rrstn) begin\n\t\twptr_buff <= 'd0;\n\t\twptr_syn <= 'd0;\n\tend \n\telse begin\n\t\twptr_buff <= wptr;\n\t\twptr_syn <= wptr_buff;\n\tend\nend\n\nassign wfull = (wptr == {~rptr_syn[ADDR_WIDTH:ADDR_WIDTH-1],rptr_syn[ADDR_WIDTH-2:0]});\nassign rempty = (rptr == wptr_syn);\n\n/***********RAM*********/\nwire \twen\t;\nwire\tren\t;\nwire \twren;//high write\nwire [ADDR_WIDTH-1:0]\twaddr;\nwire [ADDR_WIDTH-1:0]\traddr;\nassign wen = winc & !wfull;\nassign ren = rinc & !rempty;\nassign waddr = waddr_bin[ADDR_WIDTH-1:0];\nassign raddr = raddr_bin[ADDR_WIDTH-1:0];\n\ndual_port_RAM #(.DEPTH(DEPTH),\n\t\t\t\t.WIDTH(WIDTH)\n)dual_port_RAM(\n\t.wclk (wclk),  \n\t.wenc (wen),  \n\t.waddr(waddr[ADDR_WIDTH-1:0]),  //The depth is logarithmic to 2 to get the bit width of the address\n\t.wdata(wdata),       \t//data_write\n\t.rclk (rclk), \n\t.renc (ren), \n\t.raddr(raddr[ADDR_WIDTH-1:0]),   \n\t.rdata(rdata)  \t\t\n);\n\nendmodule"}
{"task_id": "LIFObuffer", "prompt": "Please act as a professional Verilog designer.\n\nA Last-In-First-Out (LIFO) buffer for temporary data storage. This 4-bit wide buffer can hold up to 4 entries, allowing for push and pop operations controlled by read/write (RW) signals.\n\nModule name:\n    LIFObuffer\n\nInput ports:\n    dataIn [3:0]: 4-bit input data to be pushed onto the buffer.\n    RW: Read/Write control signal (1 for read, 0 for write).\n    EN: Enable signal to activate buffer operations.\n    Rst: Active high reset signal to initialize the buffer.\n    Clk: Clock signal for synchronous operations.\n\nOutput ports:\n    EMPTY: Flag indicating whether the buffer is empty.\n    FULL: Flag indicating whether the buffer is full.\n    dataOut [3:0]: 4-bit output data retrieved from the buffer.\n\nImplementation:\n    The buffer uses a stack memory array (stack_mem) to store the data. A stack pointer (SP) tracks the current position in the stack.\n    On the rising edge of the clock (Clk), if the enable (EN) signal is high:\n    If the reset (Rst) signal is high, the stack is cleared, the stack pointer is set to 4 (indicating an empty buffer), and all memory locations are initialized to 0.\n    If the reset signal is low, the buffer checks if it is full or empty and processes data accordingly:\n    If RW is low (write operation) and the buffer is not full, data from dataIn is pushed onto the stack, and the stack pointer is decremented.\n    If RW is high (read operation) and the buffer is not empty, data is popped from the stack into dataOut, the corresponding stack memory is cleared, and the stack pointer is incremented.\n    Flags for EMPTY and FULL are updated based on the stack pointer status.\n\nGive me the complete code.", "gloden_code": "module LIFObuffer (\n    input [3:0] dataIn,\n    input RW,\n    input EN,\n    input Rst,\n    input Clk,\n    output reg EMPTY,\n    output reg FULL,\n    output reg [3:0] dataOut\n);\n\n    reg [3:0] stack_mem[0:3];\n    reg [2:0] SP;\n    integer i;\n\n    always @ (posedge Clk) begin\n        if (EN == 0) begin\n            // Do nothing if EN is 0\n        end else begin\n            if (Rst == 1) begin\n                SP = 3'd4;\n                EMPTY = SP[2];\n                dataOut = 4'h0;\n                for (i = 0; i < 4; i = i + 1) begin\n                    stack_mem[i] = 0;\n                end\n            end else if (Rst == 0) begin\n                FULL = SP ? 0 : 1;\n                EMPTY = SP[2];\n                dataOut = 4'hx;\n                \n                if (FULL == 1'b0 && RW == 1'b0) begin\n                    SP = SP - 1'b1;\n                    FULL = SP ? 0 : 1;\n                    EMPTY = SP[2];\n                    stack_mem[SP] = dataIn;\n                end else if (EMPTY == 1'b0 && RW == 1'b1) begin\n                    dataOut = stack_mem[SP];\n                    stack_mem[SP] = 0;\n                    SP = SP + 1;\n                    FULL = SP ? 0 : 1;\n                    EMPTY = SP[2];\n                end else begin\n                    // Do nothing if neither condition is met\n                end\n            end else begin\n                // Do nothing if neither condition is met\n            end\n        end\n    end\nendmodule"}
{"task_id": "parallel2serial", "prompt": "Please act as a professional verilog designer.\n\nImplement a module for parallel-to-serial conversion, where every four input bits are converted to a serial one bit output (from MSB to LSB). The output signal valid_out is set to 1 to indicate the availability of valid serial output. When valid_out = 1, the most significant bit of d is output, and the remaining three bits are output sequentially in the following 3 cycles.\n\nModule name:  \n    parallel2serial     \n\nInput ports:\n    clk: Clock signal used for synchronous operations.\n    rst_n: Reset signal. Defined as 0 for reset and 1 for reset signal inactive.\n    d: 4-bit parallel data input.\n\nOutput ports:\n    valid_out: Valid signal indicating the availability of serial output.\n    dout: Serial output representing the converted data.\n\nImplementation:\nThe most significant bit of the parallel input is assigned to the serial output (dout). On each clock cycle, if the counter (cnt) is 3, indicating the last bit of the parallel input, the module updates the data register (data) with the parallel input (d), resets the counter (cnt) to 0, and sets the valid signal (valid) to 1.\nOtherwise, the module increments the counter (cnt) by 1, sets the valid signal (valid) to 0, and shifts the data register (data) one bit to the left, with the most significant bit shifted to the least significant bit.\nCounter Register: If the reset signal (rst_n) is high, the register (cnt) is incremented by 1.\n\nGive me the complete code.", "gloden_code": "`timescale 1ns/1ns\nmodule verified_parallel2serial(\n\tinput wire clk  ,\n\tinput wire rst_n  ,\n\tinput wire [3:0]d ,\n\toutput wire valid_out ,\n\toutput wire dout\n\t);\n\n\nreg [3:0] data = 'd0;\nreg [1:0]cnt;\nreg valid;\nassign dout = data[3];\nassign valid_out =valid;\nalways @(posedge clk or negedge rst_n) begin\n    if(!rst_n)begin\n        data<= 'd0;\n        cnt <= 'd0;\n        valid <= 'd0;\n    end\n    else  begin\n                \n\t\tif (cnt == 'd3) begin\n\t\t\tdata <= d;\n\t\t\tcnt <= 'd0;\n\t\t\tvalid <= 1;\n\t\tend\n\t\telse begin\n\t\t\tcnt <= cnt + 'd1;\n\t\t\tvalid <= 0;\n\t\t\tdata  <= {data[2:0],data[3]};\n\t\tend\n    end\n\t\t\nend\n\n\nendmodule"}
{"task_id": "pulse_detect", "prompt": "Please act as a professional verilog designer.\n\nImplement a module for pulse detection. The 1-bit input signal data_in is a continuous input, which is triggered by clk. When \"data_in\" changes from 0 to 1 to 0(3 cycles), this is considered as a \"pulse\". The indicating signal dataout is 1 at the end cycle of the \"pulse\", and then returns to 0 until the corresponding pulse appears again. For example, if data_in is 01010(5 cycles), the data_out is 00101.\n\n\nModule name:  \n    pulse_detect\n\nInput ports\uff1a\n    clk: Clock signal.\n    rst_n: Reset signal (active low).\n    data_in: One-bit input signal.\n\nOutput ports\uff1a\n    data_out: Output signal indicating the presence of pulses.\n\nImplementation:\nDeclare the module pulse_detect with input and output ports as specified in the ports statement.\nDeclare a register state to keep track of the current state of the pulse detection process.\nInside an always block, sensitive to the positive edge of the clk signal and the negative edge of the rst_n signal, implement the logic for pulse detection and output generation.\nIn the reset condition (~rst_n), set the state register to the initial state and set the data_out output to 0, indicating no pulse. Continue the detection process for the remaining states. For each state, check the value of data_in and transition to the next state accordingly. If the current state satisfies the last state of a \"pulse\", set data_out to 1, indicating the end of a pulse. Otherwise, set data_out to 0.\n\nGive me the complete code.", "gloden_code": "`timescale 1ns/1ns\n\nmodule verified_pulse_detect(    \n    input clk,\n    input rst_n,\n    input data_in,\n    output reg data_out\n);\n\nparameter s0 = 2'b00; // initial\nparameter s1 = 2'b01; // 0, 00\nparameter s2 = 2'b10; // 01\nparameter s3 = 2'b11; // 010\n\nreg [1:0] pulse_level1, pulse_level2;\n\nalways @(posedge clk or negedge rst_n) begin\n    if (!rst_n)\n        pulse_level1 <= s0;\n    else\n        pulse_level1 <= pulse_level2;\nend\n\nalways @(*) begin\n    case (pulse_level1)\n        s0: begin\n            if (data_in == 0)\n                pulse_level2 = s1;\n            else\n                pulse_level2 = s0;\n        end\n\n        s1: begin\n            if (data_in == 1)\n                pulse_level2 = s2;\n            else\n                pulse_level2 = s1;\n        end\n\n        s2: begin\n            if (data_in == 0)\n                pulse_level2 = s3;\n            else\n                pulse_level2 = s0;\n        end\n\n        s3: begin\n            if (data_in == 1)\n                pulse_level2 = s2;\n            else\n                pulse_level2 = s1;\n        end\n    endcase\nend\n\n// always @(posedge clk or negedge rst_n) begin\n//     if (~rst_n)\n//         data_out <= 0;\n//     else if (pulse_level1 == s2 && data_in == 0)\n//         begin\n//         data_out <= 1;\n//         end\n//     else\n//         data_out <= 0;\n// end\n\nalways @(*) begin\n    if (~rst_n)\n        data_out = 0;\n    else if (pulse_level1 == s2 && data_in == 0)\n        data_out = 1;\n    else\n        data_out = 0;\nend\n\nendmodule"}
{"task_id": "traffic_light", "prompt": "Please act as a professional verilog designer.\n\nImplement a traffic light, with red, yellow and green three small indicators and a pedestrian button, under normal circumstances, the motor vehicle lane indicator light according to 60 clock cycles of green, 5 clock cycles of yellow, 10 clock cycles of red. When the pedestrian button is pressed, if the remaining green time is greater than 10 clocks, it is shortened to 10 clocks, and if it is less than 10 clocks, it remains unchanged. The lane light and the sidewalk light should be paired, when the lane light is green or yellow, the sidewalk light is red; When the lane light is red, the sidewalk light is green, and for the sake of simplicity, only the lane light is considered.\n\nModule name:  \n    traffic_light\n\nInputs:\n    rst_n: Reset signal (active low).\n    clk: Clock signal.\n    pass_request: Request signal for allowing vehicles to pass.\n\nOutputs:\n    clock[7:0]: An 8-bit output representing the count value of the internal counter.\n    red, yellow, green: Output signals representing the state of the traffic lights.\n\nParameters:\n    idle, s1_red, s2_yellow, s3_green: Enumeration values representing different states of the traffic light controller.\n\nRegisters and Wires:\n    cnt: A 8-bit register used as an internal counter for timing purposes.\n    state: A 2-bit register representing the current state of the traffic light controller.\n    p_red, p_yellow, p_green: 1-bit registers representing the next values for the red, yellow, and green signals.\n\nImplementation:\nThe following is the design track we recommend:\nThe first always block is responsible for the state transition logic. It uses a case statement to handle different states. Here's a summary of each state:\nidle: Initial state where all signals are set to 0. Transition to s1_red state occurs immediately.\ns1_red: Sets the red signal to 1 and waits for a count of 3 before transitioning to s3_green state. Otherwise, it remains in s1_red state.\ns2_yellow: Sets the yellow signal to 1 and waits for a count of 3 before transitioning to s1_red state. Otherwise, it remains in s2_yellow state.\ns3_green: Sets the green signal to 1 and waits for a count of 3 before transitioning to s2_yellow state. Otherwise, it remains in s3_green state.\nThe second always block handles the counting logic of the internal counter (cnt). The counter is decremented by 1 on every positive edge of the clock or negative edge of the reset signal. The counter values are adjusted based on various conditions:\nIf (!rst_n), the counter is set to 10.\nIf the pass_request signal is active and the green signal is active, the counter is set to 10.\nIf the green signal is inactive and the previous green signal (p_green) was active, the counter is set to 60.\nIf the yellow signal is inactive and the previous yellow signal (p_yellow) was active, the counter is set to 5.\nIf the red signal is inactive and the previous red signal (p_red) was active, the counter is set to 10.\nOtherwise, the counter is decremented normally.\nThe assign statement assigns the value of the internal counter (cnt) to the output clock.\nThe final always block handles the output signals. It assigns the previous values (p_red, p_yellow, p_green) to the output signals (red, yellow, green) on the positive edge of the clock or negative edge of the reset signal.\n\nGive me the complete code.", "gloden_code": "`timescale 1ns/1ns\n\nmodule verified_traffic_light\n    (\n\t\tinput rst_n, \n      input clk, \n      input pass_request,\n\t\t  output wire[7:0]clock,\n      output reg red,\n\t\t  output reg yellow,\n\t\t  output reg green\n    );\n\t\n\tparameter \tidle = 2'd0,\n\t\t\t\ts1_red = 2'd1,\n\t\t\t\ts2_yellow = 2'd2,\n\t\t\t\ts3_green = 2'd3;\n\treg [7:0] cnt;\n\treg [1:0] state;\n\treg p_red,p_yellow,p_green;\t\n\n\nalways @(posedge clk or negedge rst_n) \n    begin\n        if(!rst_n)\n        begin\n\t\t\tstate <= idle;\n\t\t\tp_red <= 1'b0;\n\t\t\tp_green <= 1'b0;\n\t\t\tp_yellow <= 1'b0;\t\t\t\n        end\n        else case(state)\n\t\tidle:\n\t\t\tbegin\n\t\t\t\tp_red <= 1'b0;\n\t\t\t\tp_green <= 1'b0;\n\t\t\t\tp_yellow <= 1'b0;\n\t\t\t\tstate <= s1_red;\n\t\t\tend\n\t\ts1_red:\n\t\t\tbegin\n\t\t\t\tp_red <= 1'b1;\n\t\t\t\tp_green <= 1'b0;\n\t\t\t\tp_yellow <= 1'b0;\n\t\t\t\tif (cnt == 3) \n\t\t\t\t\tstate <= s3_green;\n\t\t\t\telse\n\t\t\t\t\tstate <= s1_red;\n\t\t\tend\n\t\ts2_yellow:\n\t\t\tbegin\n\t\t\t\tp_red <= 1'b0;\n\t\t\t\tp_green <= 1'b0;\n\t\t\t\tp_yellow <= 1'b1;\n\t\t\t\tif (cnt == 3) \n\t\t\t\t\tstate <= s1_red;\n\t\t\t\telse\n\t\t\t\t\tstate <= s2_yellow;\n\t\t\tend\n\t\ts3_green:\n\t\t\tbegin\n\t\t\t\tp_red <= 1'b0;\n\t\t\t\tp_green <= 1'b1;\n\t\t\t\tp_yellow <= 1'b0;\n\t\t\t\tif (cnt == 3) \n\t\t\t\t\tstate <= s2_yellow;\n\t\t\t\telse\n\t\t\t\t\tstate <= s3_green;\n\t\t\tend\n\t\tendcase\n\tend\n \nalways @(posedge clk or negedge rst_n) \n      if(!rst_n)\n\t\t\tcnt <= 7'd10;\n\t\telse if (pass_request&&green&&(cnt>10))\n\t\t\tcnt <= 7'd10;\n\t\telse if (!green&&p_green)\n\t\t\tcnt <= 7'd60;\n\t\telse if (!yellow&&p_yellow)\n\t\t\tcnt <= 7'd5;\n\t\telse if (!red&&p_red)\n\t\t\tcnt <= 7'd10;\t\n\t\telse cnt <= cnt -1;\n assign clock = cnt;\n\nalways @(posedge clk or negedge rst_n) \n        if(!rst_n)\n\t\t\tbegin\n\t\t\t\tyellow <= 1'd0;\n\t\t\t\tred <= 1'd0;\n\t\t\t\tgreen <= 1'd0;\n\t\t\tend\n\t\telse \n\t\t\tbegin\n\t\t\t\tyellow <= p_yellow;\n\t\t\t\tred <= p_red;\n\t\t\t\tgreen <= p_green;\n\t\t\tend\t\t\n\nendmodule"}
{"task_id": "edge_detect", "prompt": "Please act as a professional verilog designer.\n\nImplement a module for edge detection. There is a slowly changing 1-bit signal a. When \"a\" changes from 0 to 1, the indicating signal rise is 1. When \"a\" changes from 1 to 0, the falling edge of signal a is shown, the indicating signal down is 1. rise or down will be set to 1 on the next clock when the corresponding edge appears, and then return to 0 until the corresponding edge appears again.\n\nModule name:  \n    edge_detect      \n\nInput ports:\n    clk: Clock signal.\n    rst_n: Reset signal (active low).\n    a: Input signal.\n\nOutput ports:\n    rise: Output signal indicating a rising edge.\n    down: Output signal indicating a falling edge.\n\nImplementation:\nThe edge_detect module detects rising and falling edges in the input signal a and generates corresponding output signals rise and down. The rising and falling edges are detected on the positive edge of the clock signal clk. If a rising edge is detected, the rise output signal is set to 1. If a falling edge is detected, the down output signal is set to 1. Otherwise, both output signals are set to 0. These output signals are synchronized with the clock and remain set to 1 until the corresponding edge appears again.\n\nGive me the complete code.", "gloden_code": "`timescale 1ns/1ns\nmodule verified_edge_detect(\n\tinput clk,\n\tinput rst_n,\n\tinput a,\n\t\n\toutput reg rise,\n\toutput reg down\n);\n\treg a0;\n    always@(posedge clk or negedge rst_n) begin\n        if(~rst_n) begin\n            rise <= 1'b0;\n            down <= 1'b0;\n        end \n        else begin\n            if(a & ~a0) begin\n                rise <= 1;\n                down <= 0;\n            end \n            else if (~a & a0) begin\n                rise <= 0;\n                down <= 1;\n            end else begin\n                rise <= 0;\n                down <= 0;\n            end\n        end\n    end\n    \n    always@(posedge clk or negedge rst_n) begin\n        if(~rst_n) \n            a0 <= 0;\n        else \n            a0 <= a;\n    end\nendmodule"}
{"task_id": "synchronizer", "prompt": "Please act as a professional verilog designer.\n\nImplement a multi-bit MUX-based synchronizer, data_in will remain constant during the period when data_en is high, and data_en is high for at least 3 clk_b clock cycles. When the value of data_en is high, data can be synchronized. The data change frequency of data_in is very low. The change interval between two adjacent data is at least 10 clk_b clock cycles.\nThe clock clk_a is responsible for: input data_in is refer to clock a. enable signal data_en is refer to clock a.\nThe clock clk_b is responsible for the enable signal data_en delays two cycles, that is, two D flip-flops. This is done with reference to clock b. And the data is finally output dataout, and the output refers to clock b.\n\nModule name:  \n    synchronizer  \n\nInput ports:\n\tclk_a: Clock signal A used for synchronous operations.\n\tclk_b: Clock signal B used for synchronous operations.\n\tarstn: Active-low reset signal A. Defined as 0 for reset and 1 for reset signal inactive.\n\tbrstn: Active-low reset signal B. Defined as 0 for reset and 1 for reset signal inactive.\n\tdata_in: Input data signal of size 4 bits.\n\tdata_en: Input enable signal that controls the selection operation.\n\nOutput ports:\n    dataout: Output data signal of size 4 bits.\n\nImplementation:\nData Register:\nThe module includes a register, data_reg, to store the input data signal, data_in.\nOn the positive edge of clock signal A (clk_a) or the falling edge of reset signal A (arstn), the module updates the register. If the reset signal A (arstn) is low, indicating a reset condition, the register (data_reg) is set to 0. If the reset signal A (arstn) is high, the register (data_reg) is updated with the input data signal (data_in).\nEnable Data Register:\nThe module includes a register, en_data_reg, to store the input enable signal, data_en.\nOn the positive edge of clock signal A (clk_a) or the falling edge of reset signal A (arstn), the module updates the register. If the reset signal A (arstn) is low, the register (en_data_reg) is set to 0. If the reset signal A (arstn) is high, the register (en_data_reg) is updated with the input enable signal (data_en).\nEnable Control Registers:\nThe module includes two registers, en_clap_one and en_clap_two, to control the selection of the input data. On the positive edge of clock signal B (clk_b) or the falling edge of reset signal B (brstn), the module updates the registers. If the reset signal B (brstn) is low, indicating a reset condition, both registers (en_clap_one and en_clap_two) are set to 0.\nIf the reset signal B (brstn) is high, the registers (en_clap_one and en_clap_two) are updated based on the value of en_data_reg. The register en_clap_one is assigned the value of en_data_reg, and en_clap_two is assigned the previous value of en_clap_one.\nOutput Assignment:\nOn the positive edge of clock signal B (clk_b) or the falling edge of reset signal B (brstn), the module assigns the output data value. If the reset signal B (brstn) is low, indicating a reset condition, the output data (dataout) is set to 0. If the reset signal B (brstn) is high and the control signal (en_clap_two) is active, the output data (dataout) is assigned the value of the data register (data_reg). If the control signal (en_clap_two) is inactive, the output data (dataout) retains its previous value.\n\nGive me the complete code.", "gloden_code": "module verified_synchronizer(\n\tinput \t\t\t\tclk_a\t, \n\tinput \t\t\t\tclk_b\t,   \n\tinput \t\t\t\tarstn\t,\n\tinput\t\t\t\tbrstn   ,\n\tinput\t\t[3:0]\tdata_in\t,\n\tinput               data_en ,\n\n\toutput reg  [3:0] \tdataout\n);\n\nreg\t[3:0]\tdata_reg;\nalways@(posedge clk_a or negedge arstn)\nbegin\n\tif(!arstn)\tdata_reg <= 0;\n\t\telse\tdata_reg <= data_in;\nend\nreg en_data_reg;\t\nalways@(posedge clk_a or negedge arstn)\nbegin\n\tif(!brstn)\ten_data_reg <= 0;\n\t\telse\ten_data_reg <= data_en;   \nend\n\nreg\ten_clap_one;\t//1\nreg en_clap_two;\t//2\nalways@(posedge clk_b or negedge brstn)\nbegin\n\tif(!brstn)\ten_clap_one <= 0;\n\t\telse\ten_clap_one <= en_data_reg;\t\nend\nalways@(posedge clk_b or negedge brstn)\nbegin\n\tif(!brstn)\ten_clap_two <= 0;\n\t\telse\ten_clap_two <= en_clap_one;\nend\n\nalways@(posedge clk_b or negedge brstn)\nbegin\n\tif(!brstn)\tdataout <= 0;\n\t\telse\tdataout <= (en_clap_two) ? data_reg : dataout;\nend\n\nendmodule"}
{"task_id": "width_8to16", "prompt": "Please act as a professional verilog designer.\n\nImplement a data width conversion circuit that converts 8-bit data input to 16-bit data output. The module provides two output ports: valid_out, which indicates the validity of the output data, and data_out, which represents the converted 16-bit output data. The first arriving 8-bit data should be placed in the higher 8 bits of the 16-bit data output. The valid_out and data_out signals are generated in the next clock cycle after the two data inputs. When there is only one data input, valid_out and data_out are not generated immediately. Instead, they wait for the arrival of the next data input to complete the concatenation of the two data inputs before generating valid_out and data_out. \n\nModule name:  \n    width_8to16   \n\nInput ports:\n    clk: Clock signal used for synchronous operation.\n    rst_n: Active-low reset signal. Defined as 0 for reset and 1 for reset signal inactive.\n    valid_in: Input signal indicating the validity of the input data.\n    data_in: 8-bit input data to be converted.\n\nOutput ports:\n    valid_out: Output signal indicating the validity of the output data.\n    data_out: 16-bit output data resulting from the width conversion.\n\nImplementation:\nThe data_out register is triggered on the positive edge of the clock signal (posedge clk) or the negative edge of the reset signal (negedge rst_n).\nOn reset, indicated by !rst_n, the data_out register is cleared to 0.\nIf the input data is valid (valid_in) and the flag signal is active, the data_out register is updated by concatenating the contents of the data_lock register (8 bits) and the data_in register (8 bits) to form a 16-bit output. The first valid data is temporarily stored, and when the second valid data is inputted, they are concatenated to produce the output valid_out and data_out.\n\nGive me the complete code.", "gloden_code": "`timescale 1ns/1ns\nmodule verified_width_8to16(\n\tinput \t\t\t\t   clk \t\t,   \n\tinput \t\t\t\t   rst_n\t\t,\n\tinput\t\t\t\t      valid_in\t,\n\tinput\t   [7:0]\t\t   data_in\t,\n \n \toutput\treg\t\t\tvalid_out,\n\toutput   reg [15:0]\tdata_out\n);\nreg \t[7:0]\t\tdata_lock;  //data buffer\nreg \t\t\t\tflag\t   ;\n//input data buff in data_lock\nalways @(posedge clk or negedge rst_n ) begin\n\tif(!rst_n) \n\t\tdata_lock <= 'd0;\n\telse if(valid_in && !flag)\n\t\tdata_lock <= data_in;\nend\n//generate flag\nalways @(posedge clk or negedge rst_n ) begin\n\tif(!rst_n) \n\t\tflag <= 'd0;\n\telse if(valid_in)\n\t\tflag <= ~flag;\nend\n//generate valid_out\nalways @(posedge clk or negedge rst_n ) begin\n\tif(!rst_n) \n\t\tvalid_out <= 'd0;\n\telse if(valid_in && flag)\n\t\tvalid_out <= 1'd1;\n\telse\n\t\tvalid_out <= 'd0;\nend\n//data stitching \nalways @(posedge clk or negedge rst_n ) begin\n\tif(!rst_n) \n\t\tdata_out <= 'd0;\n\telse if(valid_in && flag)\n\t\tdata_out <= {data_lock, data_in};\nend\n\nendmodule"}
{"task_id": "calendar", "prompt": "Please act as a professional verilog designer.\n\nImplement a module of perpetual calendar. The starting value of Secs, Mins, and Hours are all 0. Both Secs and Mins loop continuously from 0 to 59. When Secs=59, Min increases by 1 at the next cycle, and when Min=59 && Secs=59, Hours increases by 1 at the next cycle. Hours is counted from the 0-23 cycle.\n\nModule name:  \n    calendar  \n                 \nInput ports:\n    CLK: Clock input\n    RST: Active high reset signal\n\nOutput ports:\n    Hours: 6-bit output representing the current hours\n    Mins: 6-bit output representing the current minutes\n    Secs: 6-bit output representing the current seconds\n\nImplementation:\nThe calendar module uses three always blocks to update the values of seconds, minutes, and hours based on the clock signal and reset signal.\nThe first always block triggers on the positive edge of the clock signal (posedge CLK) or the positive edge of the reset signal (posedge RST). It checks if the reset signal is active (RST) and sets the seconds value (Secs) to 0. If the seconds value is 59, it wraps around and sets the seconds value to 0. Otherwise, it increments the seconds value by 1.\nThe second always block also triggers on the positive edge of the clock signal or the positive edge of the reset signal. It handles the minutes value (Mins). If the reset signal is active, it sets the minutes value to 0. If both the minutes and seconds values are 59, it wraps around and sets the minutes value to 0. If the seconds value is 59, it increments the minutes value by 1. Otherwise, it keeps the minutes value unchanged.\nThe third always block triggers on the positive edge of the clock signal or the positive edge of the reset signal. It handles the hours value (Hours). If the reset signal is active, it sets the hours value to 0. If the hours, minutes, and seconds values are all at their maximum (23, 59, and 59 respectively), it wraps around and sets the hours value to 0. If the minutes and seconds values are both 59, it increments the hours value by 1. Otherwise, it keeps the hours value unchanged.\n\nGive me the complete code.", "gloden_code": "module verified_calendar(CLK,RST,Hours,Mins,Secs);\ninput CLK,RST;\noutput [5:0] Hours,Mins,Secs;\nreg [5:0] Hours,Mins,Secs;\n\nalways@(posedge CLK or posedge RST) begin\n\tif (RST)\n\t\tSecs <= 0;\n\telse if (Secs == 59)\n\t\tSecs <= 0;\n\telse\n\t\tSecs <= Secs + 1;\nend\n\nalways@(posedge CLK or posedge RST) begin\n\tif (RST)\n\t\tMins <= 0;\n\telse if((Mins==59)&&(Secs==59))\n\t\tMins <= 0;\n\telse if(Secs== 59)\n\t\tMins <= Mins + 1;\n\telse\n\t\tMins <= Mins;\nend\n\nalways@(posedge CLK or posedge RST) begin\n        if (RST)\n                Hours <= 0;\n        else if((Hours == 23)&&(Mins==59)&&(Secs==59))\n                Hours <= 0;\n        else if((Mins == 59)&&(Secs==59))\n                Hours <= Hours + 1;\n        else\n                Hours <= Hours;\nend\n\nendmodule"}
{"task_id": "serial2parallel", "prompt": "Please act as a professional verilog designer.\n\nImplement a series-parallel conversion circuit. It receives a serial input signal \"din_serial\" along with a control signal \"din_valid\" indicating the validity of the input data. The module operates on the rising edge of the clock signal \"clk\" and uses a synchronous design. The input din_serial is a single-bit data, and when the module receives 8 input data, the output dout_parallel outputs the 8-bit data(The serial input values are sequentially placed in dout_parallel from the most significant bit to the least significant bit), and the dout_valid is set to 1.\n\nModule name:  \n    serial2parallel          \n\nInput ports:\n\tclk: Clock signal.\n\trst_n: Reset signal (active low).\n\tdin_serial: Serial input data.\n\tdin_valid: Validity signal for input data.\t\n\nOutput ports:\n\tdout_parallel: Parallel output data (8 bits wide).\n\tdout_valid: Validity signal for the output data.\n\nImplementation:\nThe module utilizes a 4-bit counter (cnt) to keep track of the number of serial input data bits received. Every eight din_serial input, dout_parallel will output. When all 8 serial data bits have been received, the valid output signal is set to 1, indicating that the parallel output data is valid. Otherwise, the valid output signal is set to 0, indicating that the parallel output data is not valid.\n\nGive me the complete code.", "gloden_code": "module verified_serial2parallel(\n\tinput clk,\n\tinput rst_n,\n\tinput din_serial,\n\tinput din_valid,\n\toutput reg [7:0]dout_parallel,\n\toutput reg dout_valid\n);\n\n\treg[7:0]din_tmp;\n\treg[3:0]cnt;\n\t\n\talways@(posedge clk or negedge rst_n)begin\n\t\tif(!rst_n)\n\t\t\tcnt <= 0;\n\t\telse if(din_valid)\n\t\t\tcnt <= (cnt == 4'd8)?0:cnt+1'b1;\n\t\telse\t\n\t\t\tcnt <= 0;\n\tend\n\t\n\talways@(posedge clk or negedge rst_n)begin\n\t\tif(!rst_n)\n\t\t\tdin_tmp <= 8'b0;\n\t\telse if(din_valid && cnt <= 4'd7)\n\t\t\tdin_tmp <= {din_tmp[6:0],din_serial};\n\t\n\tend \n\t\n\talways@(posedge clk or negedge rst_n)begin\n\t\tif(!rst_n)begin\n\t\t\tdout_valid <= 1'b0;\n\t\t\tdout_parallel <= 8'b0;\n\t\tend\n\t\telse if(cnt == 4'd8)begin\n\t\t\tdout_valid <= 1'b1;\n\t\t\tdout_parallel <= din_tmp;\n\t\tend\n\t\telse begin\n\t\t\tdout_valid <= 1'b0;\n\t\tend\n\tend \n\t\nendmodule"}
{"task_id": "square_wave", "prompt": "Please act as a professional verilog designer.\n\nThe module is a simple yet effective generator designed to produce square wave signals with variable frequency. It takes an input clock signal and a frequency value, and outputs a square wave signal toggling at the specified frequency.\n\nModule name:  \n    square_wave \n                 \nInput ports:\n    clk: Clock signal that drives the module.\n    [7:0]freq: Frequency control, specifying how often the square wave toggles.\n\nOutput ports:\n    wave_out: Square wave output signal.\n\nInternal Registers:\n    count (reg [7:0]): Counter register used to track cycles between wave toggles.\n    \nImplementation:\nCounter Operation:\n    The count register increments on each rising edge of the clk.\n    When count reaches (freq - 1), the count is reset to 0 and wave_out is toggled (i.e., flipped from 0 to 1 or from 1 to 0).\n    If count has not reached freq, it simply increments by one on the next clock cycle.\nSquare Wave Generation:\n    The module produces a square wave by flipping the wave_out signal at the rate determined by freq.\n    The higher the freq value, the slower the square wave toggles (i.e., the lower the output frequency), and vice versa.\n    \nGive me the complete code.", "gloden_code": "module square_wave(\n    input clk,                     \n    input [7:0] freq,           \n    output reg wave_out          \n);\n\nreg [7:0] count;                \n\ninitial begin\n    wave_out = 0;  \n    count = 0;     \nend\n\nalways @(posedge clk) begin\n    if(count == freq - 1 ) begin      \n        count <= 0;\n        wave_out <=  ~wave_out ;            \n\n    end else begin\n        count <= count + 1;        \n    end\nend\n\nendmodule"}
{"task_id": "signal_generator", "prompt": "Please act as a professional verilog designer.\n\nImplement a Triangle Wave signal generator module that generates a waveform by incrementing and decrementing a 5-bit signal named \"wave\". The waveform cycles between 0 and 31, which is incremented or decremented by 1.\n\n\nModule name:  \n    signal_generator \n                 \nInput ports:\n    clk: Clock signal used for synchronous operation.\n    rst_n: Active-low reset signal. Defined as 0 for reset and 1 for reset signal inactive.\n\nOutput ports:\n    wave: 5-bit output waveform signal representing the generated waveform.\n\nImplementation:\nState and Waveform Generation:\nThe module includes a register, state, used to control the state of the waveform generation.\nThe module also includes a register, wave, with a width of 5 bits, which represents the generated waveform.\nThe state and waveform registers are updated in the always block, triggered on the positive edge of the clock signal (posedge clk) or the negative edge of the reset signal (negedge rst_n).\nOn reset, indicated by ~rst_n, the state register is cleared to 0, and the wave register is cleared to 0.\nThe waveform generation is controlled using a case statement based on the current state:\nIf the state is 0, the waveform (wave) is incremented by 1.\nIf the waveform reaches 31 (wave == 31), the state is transitioned to 1.\nIf the state is 1, the waveform is decremented by 1.\nIf the waveform reaches 0 (wave == 0), the state is transitioned back to 0.\nThe waveform generation continues to cycle between 0 and 31 based on the state transitions.\n\nGive me the complete code.", "gloden_code": "module verified_signal_generator(\n  input clk,\n  input rst_n,\n  output reg [4:0] wave\n);\n\n  reg [1:0] state;\n  \n  always @(posedge clk or negedge rst_n) begin\n    if (~rst_n) begin\n      state <= 2'b0;\n      wave <= 5'b0;\n    end\n    else begin\n      case (state)\n        2'b00:\n          begin\n            if (wave == 5'b11111)\n              state <= 2'b01;\n            else\n              wave <= wave + 1;\n          end\n          \n        2'b01:\n          begin\n            if (wave == 5'b00000)\n              state <= 2'b00;\n            else\n              wave <= wave - 1;\n          end\n      endcase\n    end\n  end\n\nendmodule"}
{"task_id": "RAM", "prompt": "Please act as a professional verilog designer.\n\nImplement a dual-port RAM with a depth of 8 and a bit width of 6 bits, with all data initialized to 000000. It has two groups of ports, respectively for reading data and writing data, and read and write operations can be carried out at the same time. When the read_en signal is 1, the read_data of the corresponding position is read through the read_addr signal and output; When the write_en signal is 1, data is written to the corresponding position through the write_addr signal and write-data signal.\n\nModule name:  \n    RAM               \nInput ports:\n\tclk: Clock signal used for synchronous operation.\n\trst_n: Active-low reset signal. Defined as 0 for reset and 1 for reset signal inactive.\n\twrite_en: Write enable signal to initiate a write operation.\n\twrite_addr: Address for the write operation.\n\twrite_data: Data to be written to the RAM.\n\tread_en: Read enable signal to initiate a read operation.\n\tread_addr: Address for the read operation.\n\nOutput ports:\n    read_data: Output signal representing the data read from the RAM.\n\nParameter: \n\tWIDTH = 6;\n    DEPTH = 8;\n\nImplementation:\nRAM Array:\nThe module includes a register array, RAM. The array is defined as reg [DEPTH - 1 : 0] RAM [2**WIDTH-1:0], allowing for 2^6 memory locations, each with a width of 6 bits.\nWrite Operation:\nThe first always block triggers on the positive edge of the clock signal (posedge clk) or the negative edge of the reset signal (negedge rst_n).\nOn reset, indicated by !rst_n, all memory locations in the RAM array are cleared to 0.\nIf the write enable signal (write_en) is active, the data (write_data) is written to the RAM array at the specified address (write_addr).\nRead Operation:\nThe second always block triggers on the positive edge of the clock signal (posedge clk) or the negative edge of the reset signal (negedge rst_n).\nOn reset, indicated by !rst_n, the read_data register is cleared to 0.\nIf the read enable signal (read_en) is active, the data at the specified address (read_addr) in the RAM array is assigned to the read_data register.\nIf the read enable signal is not active, the read_data register is cleared to 0.\n\nGive me the complete code.", "gloden_code": "module verified_RAM (\n\tinput clk,\n\tinput rst_n,\n\t\n\tinput write_en,\n\tinput [7:0]write_addr,\n\tinput [5:0]write_data,\n\t\n\tinput read_en,\n\tinput [7:0]read_addr,\n\toutput reg [5:0]read_data\n);\n    \n    //defination\n    reg [7 : 0] RAM [11:0];\n\n    //output \n    integer i;\n    always@(posedge clk or negedge rst_n)begin\n        if(!rst_n) begin\n               for(i = 0; i < 8; i = i + 1) begin\n                   RAM[i] <= 'd0;\n               end\n        end\n        else if(write_en) \n            RAM[write_addr] <= write_data;\n    end\n    always@(posedge clk or negedge rst_n)begin\n        if(!rst_n) \n            read_data <= 'd0;\n        else if(read_en) \n            read_data <= RAM[read_addr];\n        else \n            read_data <= 'd0;\n    end\nendmodule"}
{"task_id": "alu", "prompt": "Please act as a professional verilog designer.\n\nImplement an ALU for a 32-bit MIPS-ISA CPU. The \u201ca\u201d and \u201cb\u201d are the two operands of the ALU, the \u201caluc\u201d is the opcode, and the \u201cr\u201d gives out the result. \u201czero\u201d means if the result is zero, \u201ccarry\u201d means if there is a carry bit, \u201cnegative\u201d means if the result is negative, \u201coverflow\u201d means if the computation is overflow, the \u201cflag\u201d is the result of \u201cslt\u201d and \u201csltu\u201d instructions. The supported operations and corresponding opcode are shown below:\n    parameter ADD = 6'b100000;\n    parameter ADDU = 6'b100001;\n    parameter SUB = 6'b100010;\n    parameter SUBU = 6'b100011;\n    parameter AND = 6'b100100;\n    parameter OR = 6'b100101;\n    parameter XOR = 6'b100110;\n    parameter NOR = 6'b100111;\n    parameter SLT = 6'b101010;\n    parameter SLTU = 6'b101011;\n    parameter SLL = 6'b000000;\n    parameter SRL = 6'b000010;\n    parameter SRA = 6'b000011;\n    parameter SLLV = 6'b000100;\n    parameter SRLV = 6'b000110;\n    parameter SRAV = 6'b000111;\n    parameter LUI = 6'b001111;\n\nModule name:  \n    alu               \nInput ports:\n    a: a 32-bit input operand\n    b: a 32-bit input operand\n    aluc: a 6-bit control signal for selecting the operation to be performed\nOutput ports:\n    r: a 32-bit output representing the result of the operation\n    zero: a 1-bit output indicating whether the result is zero\n    carry: a 1-bit output indicating whether a carry occurred during the operation\n    negative: a 1-bit output indicating whether the result is negative\n    overflow: a 1-bit output indicating whether an overflow occurred during the operation\n    flag: a 1-bit output representing a general flag, which is set based on specific operations (SLT and SLTU)\n\nImplementation:\nThe module uses parameters to define the control signals for various operations, such as ADD, SUB, AND, OR, etc. \nThe module assigns the input operands to the signed wires and the output result (r) to the lower 32 bits of the register (res[31:0]). The flag output is determined based on the control signal (aluc) and is set to '1' when the operation is SLT or SLTU, and 'z' (high-impedance) otherwise. The zero output is set to '1' when the result is all zeros, and '0' otherwise.\nInside the always block, a case statement is used to perform the appropriate operation based on the control signal (aluc). The result is assigned to the register (res) accordingly. For shift operations (SLL, SRL, SRA, SLLV, SRLV, SRAV), the shift amount is determined by the value of 'a' or 'a[4:0]'. For the LUI operation, the upper 16 bits of 'a' are concatenated with 16 zeros to form the result.\nIf the control signal (aluc) does not match any defined operation, the result is assigned as 'z' (high-impedance).\n\nGive me the complete code.", "gloden_code": "`timescale 1ns / 1ps\n\nmodule verified_alu(\n    input [31:0] a,\n    input [31:0] b,\n    input [5:0] aluc,\n    output [31:0] r,\n    output zero,\n    output carry,\n    output negative,\n    output overflow,\n    output flag\n    );\n    \n\n    parameter ADD = 6'b100000;\n    parameter ADDU = 6'b100001;\n    parameter SUB = 6'b100010;\n    parameter SUBU = 6'b100011;\n    parameter AND = 6'b100100;\n    parameter OR = 6'b100101;\n    parameter XOR = 6'b100110;\n    parameter NOR = 6'b100111;\n    parameter SLT = 6'b101010;\n    parameter SLTU = 6'b101011;\n    parameter SLL = 6'b000000;\n    parameter SRL = 6'b000010;\n    parameter SRA = 6'b000011;\n    parameter SLLV = 6'b000100;\n    parameter SRLV = 6'b000110;\n    parameter SRAV = 6'b000111;\n    parameter JR = 6'b001000;\n    \n    parameter LUI = 6'b001111;\n      \n    \n    wire signed [31:0] a_signed;\n    wire signed [31:0] b_signed;\n    \n  \n    reg [32:0] res;\n    \n    \n    assign a_signed = a;\n    assign b_signed = b;\n    assign r = res[31:0];\n    \n    assign flag = (aluc == SLT || aluc == SLTU) ? ((aluc == SLT) ? (a_signed < b_signed) : (a < b)) : 1'bz; \n    assign zero = (res == 32'b0) ? 1'b1 : 1'b0;\n    \n    always @ (a or b or aluc)\n    begin\n        case(aluc)\n            ADD: begin\n                res <= a_signed + b_signed;\n            end\n            ADDU: begin\n                res <= a + b;\n            end\n            SUB: begin \n                res <= a_signed - b_signed;\n            end\n            SUBU: begin \n                res <= a - b;\n            end\n            AND: begin\n                res <= a & b;\n            end\n            OR: begin\n                res <= a | b;\n            end\n            XOR: begin\n                res <= a ^ b;\n            end\n            NOR: begin\n                res <= ~(a | b);\n            end\n            SLT: begin\n                res <= a_signed < b_signed ? 1 : 0;\n            end\n            SLTU: begin\n                res <= a < b ? 1 : 0;\n            end\n            SLL: begin\n                res <= b << a;\n            end\n            SRL: begin\n                res <= b >> a;\n            end\n            SRA: begin\n                res <= b_signed >>> a_signed;\n            end\n            SLLV: begin\n                res <= b << a[4:0];\n            end\n            SRLV: begin\n                res <= b >> a[4:0];\n            end\n            SRAV: begin\n                res <= b_signed >>> a_signed[4:0];\n            end\n            LUI: begin\n                res <= {a[15:0], 16'h0000};\n            end\n            default:\n            begin\n                res <= 32'bz;\n            end\n        endcase\n    end\nendmodule"}
{"task_id": "instr_reg", "prompt": "Please act as a professional Verilog designer.\n\nAn instruction register module designed to hold and process CPU instructions. It captures incoming instructions from various sources and separates them into distinct fields for further processing.\n\nModule name:\n    instr_reg\n\nInput ports:\n    clk: Clock signal for synchronization.\n    rst: Active low reset signal to initialize the register.\n    fetch [1:0]: Control signal indicating the source of the instruction (1 for register, 2 for RAM/ROM).\n    data [7:0]: 8-bit data input representing the instruction to be fetched.\n\nOutput ports:\n    ins [2:0]: High 3 bits of the instruction, indicating the opcode or operation.\n    ad1 [4:0]: Low 5 bits of the instruction, representing the register address.\n    ad2 [7:0]: The full 8-bit data from the second source.\n\nImplementation:\n    The instruction register contains two 8-bit registers (ins_p1 and ins_p2) to store instructions from different sources.\n    On the rising edge of the clock (clk), if the reset (rst) signal is low, both registers are initialized to zero.\n    Based on the fetch signal:\n    If fetch is 2'b01, the instruction is fetched from the data input into ins_p1.\n    If fetch is 2'b10, the instruction is fetched from the data input into ins_p2.\n    If neither condition is met, the previous values in both registers are retained.\n    The outputs ins, ad1, and ad2 are derived from the stored instructions.\n\n\nGive me the complete code.", "gloden_code": "module instr_reg (\n    input clk,\n    input rst,\n    input [1:0] fetch,\n    input [7:0] data,\n    output [2:0] ins,\n    output [4:0] ad1,\n    output [7:0] ad2\n);\n\n    reg [7:0] ins_p1, ins_p2;\n    reg [2:0] state;\n\n    always @(posedge clk or negedge rst) begin\n        if (!rst) begin\n            ins_p1 <= 8'd0;\n            ins_p2 <= 8'd0;\n        end else begin\n            if (fetch == 2'b01) begin // Fetch operation 1, from REG\n                ins_p1 <= data;\n                ins_p2 <= ins_p2;\n            end else if (fetch == 2'b10) begin // Fetch operation 2, from RAM/ROM\n                ins_p1 <= ins_p1;\n                ins_p2 <= data;\n            end else begin\n                ins_p1 <= ins_p1;\n                ins_p2 <= ins_p2;\n            end\n        end\n    end\n\n    assign ins = ins_p1[7:5]; // High 3 bits, instructions\n    assign ad1 = ins_p1[4:0];  // Low 5 bits, register address\n    assign ad2 = ins_p2;\nendmodule"}
{"task_id": "ROM", "prompt": "Please act as a professional Verilog designer.\n\nA Read-Only Memory (ROM) module designed for storing fixed data. This module provides a way to access predefined data based on an 8-bit address input.\n\nModule name:\n    ROM\n\nInput ports:\n    addr [7:0]: 8-bit address input used to select the data location in memory.\n\nOutput ports:\n    dout [15:0]: 16-bit output that delivers the data stored in the ROM at the specified address.\nMemory Array:\n    reg [15:0] mem [0:255]: Defines a ROM with 256 locations, each 16 bits wide.\nInitial Block:\n    The initial block is used to pre-load the ROM with fixed data. In this example, memory locations 0 through 3 are initialized with specific values (16'hA0A0, 16'hB1B1, 16'hC2C2, 16'hD3D3). Other locations can be initialized as needed.\nBehavior:\n    The always @(*) block continuously outputs the data stored in the ROM at the memory location specified by addr.\nSince ROM is read-only, this module includes only read operations.\n\nGive me the complete code.", "gloden_code": "module ROM (\n    input wire [7:0] addr,        // 8-bit Address input\n    output reg [15:0] dout        // 16-bit Data output\n);\n\n    // Declare a memory array of 256 locations, each 16 bits wide, initialized with fixed data\n    reg [15:0] mem [0:255];\n\n    // Initial block to initialize the ROM with data\n    initial begin\n        mem[0] = 16'hA0A0;\n        mem[1] = 16'hB1B1;\n        mem[2] = 16'hC2C2;\n        mem[3] = 16'hD3D3;\n        // Initialize other memory locations as needed\n    end\n\n    // Combinational logic: Read data from the ROM at the specified address\n    always @(*) begin\n        dout = mem[addr];\n    end\nendmodule"}
{"task_id": "clkgenerator", "prompt": "Please act as a professional Verilog designer.\n\nA clock generator module that produces a periodic clock signal, toggling its output state at regular intervals defined by the PERIOD parameter.\n\nModule name:\n    clkgenerator\n\nParameter:\n    PERIOD = 10\n\nOutput ports:\n    clk: The output clock signal generated by the module.\n\nImplementation:\nThis module uses an initial block to set the initial state of the clock signal to 0. The clock toggles every half of the specified PERIOD, creating a square wave clock signal with the desired frequency.\n\nGive me the complete code.", "gloden_code": "module clkgenerator (\n    output reg clk\n);\n\n    parameter PERIOD = 10; // Clock period in time units\n\n    // Initial block to set the initial state of the clock\n    initial begin\n        clk = 0; // Initialize the clock signal to 0\n    end\n\n    always begin\n        # (PERIOD / 2) clk = ~clk; // Toggle the clock every half period\n    end\n\nendmodule"}
{"task_id": "pe", "prompt": "Please act as a professional verilog designer.\n\nImplement a Multiplying Accumulator for 32bit integer. In the MAC_PE, there is a register that stores the partial sum (the intermediate accumulation result), and in each cycle, the result of \u201ca multiplied by b\u201d will be accumulated in this register, and the \u201cc\u201d shows the value of the register.\n\nModule name:  \n    pe   \n\nInput ports:\n    clk: Clock signal used for synchronous operations.\n    rst: Reset signal. Defined as 1 for reset and 0 for reset signal inactive.\n    a: 32-bit input operand A.\n    b: 32-bit input operand B.\n\nOutput ports:\n    c: 32-bit output representing the accumulated result.\n\nImplementation:\nThe module implements a parallel multiplier and accumulator using registers and an always block. It multiplies the input operands and accumulates the result into an output register.\nAccumulator Register:\nThe module includes a register, c, to store the accumulated result.\nOn the positive edge of the clock signal (clk) or the positive edge of the reset signal (rst), the module updates the register.\nIf the reset signal (rst) is high, indicating a reset condition, the register (c) is set to 0. If the reset signal (rst) is low, the register (c) is updated by adding the product of the input operands (a and b) to its current value.\nMultiplication and Accumulation:\nInside the always block, the module performs the multiplication and accumulation operation. If the reset signal (rst) is high, the register (c) is set to 0. If the reset signal (rst) is low, the module adds the product of the input operands (a and b) to the register (c).\n\nGive me the complete code.", "gloden_code": "module verified_pe(\n    input clk,\n    input rst,\n    input [31:0] a,\n    input [31:0] b,\n\n    output [31:0] c\n);\n\nreg [31:0] cc;\nassign c = cc;\nalways@(posedge clk or posedge rst)\nbegin\n\n  if(rst)\n  begin\n    cc <= 0;\n  end\n\n  else\n  begin\n    cc <= cc + a*b;\n  end\n\nend\n\nendmodule"}
{"task_id": "freq_div", "prompt": "Please act as a professional verilog designer.\n\nImplement a frequency divider that the input clock frequency of 100MHz signal, and the outputs are 3 clock frequencies: 50MHz, 10MHz, 1MHz.\n\nModule name:  \n    freq_div      \n\nInput ports:\n    CLK_in: Input clock signal\n    RST: Reset signal\n\nOutput ports:\n    CLK_50: Output clock signal with a frequency of CLK_in divided by 2.\n    CLK_10: Output clock signal with a frequency of CLK_in divided by 10.\n    CLK_1: Output clock signal with a frequency of CLK_in divided by 100.\n\nImplementation:\nThe module uses three counters to divide the input clock frequency. \nCLK_50 generation:\nOn every positive edge of CLK_in or RST, if RST is active, CLK_50 is set to 0.\nOtherwise, CLK_50 is toggled by inverting its current value.\nCLK_10 generation:\nOn every positive edge of CLK_in or RST, if RST is active, CLK_10 is set to 0, and the counter cnt_10 is reset to 0.\nIf the counter cnt_10 reaches a value of 4, CLK_10 is toggled by inverting its current value, and the counter cnt_10 is reset to 0.\nOtherwise, the counter cnt_10 is incremented by 1.\nCLK_1 generation:\nOn every positive edge of CLK_in or RST, if RST is active, CLK_1 is set to 0, and the counter cnt_100 is reset to 0.\nIf the counter cnt_100 reaches a value of 49, CLK_1 is toggled by inverting its current value, and the counter cnt_100 is reset to 0.\nOtherwise, the counter cnt_100 is incremented by 1.\n\nGive me the complete code.", "gloden_code": "module freq_div (CLK_in,CLK_50,CLK_10,CLK_1,RST);\ninput CLK_in,RST;\noutput reg CLK_50,CLK_10,CLK_1;\n\nreg [3:0] cnt_10;\nreg [6:0] cnt_100;\n\nalways @(posedge CLK_in or posedge RST) begin\n\tif (RST) begin\n\t\tCLK_50<= 1'b0;\n        end\n\telse begin\n\t\tCLK_50<= ~CLK_50;\n        end\nend\n\nalways @(posedge CLK_in or posedge RST) begin\n\tif (RST) begin\n\t\tCLK_10<= 1'b0;\n                cnt_10<=0;\n        end\n\telse if (cnt_10==4) begin\n\t\tCLK_10<= ~CLK_10;\n                cnt_10<=0;\n        end\n        else begin\n                cnt_10<=cnt_10+1;\n        end\nend\n\nalways @(posedge CLK_in or posedge RST) begin\n\tif (RST) begin\n\t\tCLK_1<= 1'b0;\n                cnt_100<=0;\n        end\n\telse if (cnt_100==49) begin\n\t\tCLK_1<= ~CLK_1;\n                cnt_100<=0;\n        end\n        else begin\n                cnt_100<=cnt_100+1;\n        end\nend\n\nendmodule"}
{"task_id": "freq_divbyeven", "prompt": "Please act as a professional verilog designer.\n\nFrequency divider that divides the input clock frequency by even numbers. This module generates a divided clock signal by toggling its output every specified number of input clock cycles.\n\nModule name: \n    freq_diveven\n\nInput ports:\n    clk: Input clock signal that will be divided.\n    rst_n: Active-low reset signal to initialize the module.\n\nOutput ports:\n    clk_div: Divided clock output signal.\n\nImplementation:\n    The frequency divider uses a counter (`cnt`) to count the number of clock cycles. The `NUM_DIV` parameter specifies the division factor, which must be an even number.\n    - When the reset signal (`rst_n`) is low, the counter and the divided clock signal (`clk_div`) are initialized to zero.\n    - On each positive edge of the input clock (`clk`), if the counter is less than half of `NUM_DIV - 1`, the counter increments without changing the divided clock output.\n    - When the counter reaches the specified limit, it resets to zero and toggles the `clk_div` output signal, effectively dividing the frequency of the input clock by the even number specified by `NUM_DIV`.\n\nCounter:\n    - The counter is a 4-bit register (`cnt`) that tracks the number of clock cycles.\n\nGive me the complete code.", "gloden_code": "module freq_divbyeven(\n    clk,\n    rst_n,\n    clk_div\n);\n    input clk;\n    input rst_n;\n    output clk_div;\n    reg clk_div;\n\n    parameter NUM_DIV = 6;\n    reg    [3:0] cnt;\n\nalways @(posedge clk or negedge rst_n)\n    if(!rst_n) begin\n        cnt     <= 4'd0;\n        clk_div    <= 1'b0;\n    end\n    else if(cnt < NUM_DIV / 2 - 1) begin\n        cnt     <= cnt + 1'b1;\n        clk_div    <= clk_div;\n    end\n    else begin\n        cnt     <= 4'd0;\n        clk_div    <= ~clk_div;\n    end\n endmodule"}
{"task_id": "freq_divbyodd", "prompt": "Please act as a professional verilog designer.\n\nA frequency divider that divides the input clock frequency by odd numbers. The module generates a divided clock output by an odd divisor value provided as a parameter.\n\nModule name:\n    freq_divbyodd\n\nInput ports:\n    clk: Input clock signal.\n    rst_n: Active low reset signal that initializes the divider.\n    \nOutput ports:\n    clk_div: Divided clock output.  \n\nImplementation:\n\nThe module divides the input clock frequency by an odd number defined by the parameter NUM_DIV, which defaults to 5.\nTwo counters, cnt1 and cnt2, are used for tracking the rising and falling edges of the clock. Each counter counts up to NUM_DIV - 1.\nTwo separate clock dividers, clk_div1 and clk_div2, are used for positive and negative edges of the clock, respectively. These are toggled when the counters reach half of NUM_DIV.\nThe final divided clock output, clk_div, is derived by logically OR-ing clk_div1 and clk_div2 to account for both clock edges.\nThe active low reset signal rst_n initializes the counters and the clock divider outputs.\n\n\nGive me the complete code.", "gloden_code": "module freq_divbyodd(\n    clk,\n    rst_n,\n    clk_div\n);\n    input clk;\n    input rst_n;\n    output clk_div;\n    reg clk_div;\n\n    parameter NUM_DIV = 5;\n    reg[2:0] cnt1;\n    reg[2:0] cnt2;\n    reg    clk_div1, clk_div2;\n\nalways @(posedge clk or negedge rst_n)\n    if(!rst_n)\n        cnt1 <= 0;\n    else if(cnt1 < NUM_DIV - 1)\n        cnt1 <= cnt1 + 1'b1;\n    else\n        cnt1 <= 0;\n\nalways @(posedge clk or negedge rst_n)\n    if(!rst_n)\n        clk_div1 <= 1'b1;\n    else if(cnt1 < NUM_DIV / 2)\n        clk_div1 <= 1'b1;\n    else\n        clk_div1 <= 1'b0;\n\nalways @(negedge clk or negedge rst_n)\n    if(!rst_n)\n       cnt2 <= 0;\n    else if(cnt2 < NUM_DIV - 1)\n       cnt2 <= cnt2 + 1'b1;\n    else\n       cnt2 <= 0;\n\nalways @(negedge clk or negedge rst_n)\n    if(!rst_n)\n        clk_div2 <= 1'b1;\n    else if(cnt2 < NUM_DIV / 2)\n        clk_div2 <= 1'b1;\n    else\n        clk_div2 <= 1'b0;\n\n    assign clk_div = clk_div1 | clk_div2;\nendmodule"}
{"task_id": "freq_divbyfrac", "prompt": "Please act as a professional Verilog designer.\n\nA frequency divider that divides the input clock frequency by fractional values. It generates a clock signal with a fractional frequency division (3.5x), using the double-edge clocking technique to achieve half-integer division while adjusting for duty cycle imbalance. By dividing uneven clock cycles and phase-shifting them, a smooth fractional clock output is produced.\n\nModule name: \n    freq_divbyfrac\n\nInput ports:\n    clk: Input clock signal.\n    rst_n: Active low reset signal to initialize the module.\n    \nOutput ports:\n    clk_div: Fractionally divided clock output.\n\nImplementation:\nThe module performs fractional frequency division by counting clock cycles and generating an intermediate divided clock signal. For 3.5x division:\nThe counter cycles through 7 clock cycles (MUL2_DIV_CLK = 7).\nIt generates two uneven clock periods: one with 4 source clock cycles and another with 3 source clock cycles.\nIn the next cycle, phase-shifted versions of the divided clock are generated. One phase is delayed by half a clock period, and the other is advanced by half a clock period.\nFinally, the two intermediate clocks are logically OR-ed to produce the final fractional divided clock output, ensuring the divided clock signal has a uniform period.\n\nGive me the complete code.", "gloden_code": "module freq_divbyfrac(\n    input               rst_n ,\n    input               clk,\n    output              clk_div\n    );\n\n   parameter            MUL2_DIV_CLK = 7 ;\n   reg [3:0]            cnt ;\n   always @(posedge clk or negedge rst_n) begin\n      if (!rst_n) begin\n         cnt    <= 'b0 ;\n      end\n      else if (cnt == MUL2_DIV_CLK-1) begin\n         cnt    <= 'b0 ;\n      end\n      else begin\n         cnt    <= cnt + 1'b1 ;\n      end\n   end\n\n   reg                  clk_ave_r ;\n   always @(posedge clk or negedge rst_n) begin\n      if (!rst_n) begin\n         clk_ave_r <= 1'b0 ;\n      end\n      //first cycle: 4 source clk cycle\n      else if (cnt == 0) begin\n         clk_ave_r <= 1 ;\n      end\n      //2nd cycle: 3 source clk cycle\n      else if (cnt == (MUL2_DIV_CLK/2)+1) begin\n         clk_ave_r <= 1 ;\n      end\n      else begin\n         clk_ave_r <= 0 ;\n      end\n   end\n\n   //adjust\n   reg                  clk_adjust_r ;\n   always @(negedge clk or negedge rst_n) begin\n      if (!rst_n) begin\n         clk_adjust_r <= 1'b0 ;\n      end\n      else if (cnt == 1) begin\n         clk_adjust_r <= 1 ;\n      end\n      else if (cnt == (MUL2_DIV_CLK/2)+1 ) begin\n         clk_adjust_r <= 1 ;\n      end\n      else begin\n         clk_adjust_r <= 0 ;\n      end\n   end\n\n   assign clk_div = clk_adjust_r | clk_ave_r ;\n\nendmodule"}
{"task_id": "radix2_div", "prompt": "Please act as a professional verilog designer.\n\nImplement a simplified radix-2 divider on 8-bit signed or unsigned integers. and the inputs are two 8-bit operands. The module accepts a dividend and a divisor as inputs and provides a 16-bit result containing both the quotient and the remainder. The design supports both signed and unsigned division operations.\n\nModule name:  \n    radix2_div \n\nInput ports:\n    clk: Clock signal used for synchronous operation.\n    rst: The reset signal to initialize or reset the module.\n    sign: 1-bit indicates if the operation is signed (1) or unsigned (0).\n    dividend: 8-bit input signal representing the dividend for division.\n    divisor: 8-bit input signal representing the divisor for division.\n    opn_valid: 1-bit indicates that a valid operation request is present.\nOutput ports:\n    res_valid: 1-bit output signal indicating the result is valid and ready.\n    result: 16-bit the output containing the remainder in the upper 8 bits and the quotient in the lower 8 bits.\n\nImplementation:\n\nOperation Start:\nWhen opn_valid is high and res_valid is low, the module saves the inputs dividend and divisor.\nInitializes the shift register SR with the absolute value of the dividend shifted left by one bit.\nSets NEG_DIVISOR to the negated absolute value of the divisor.\nSets the counter cnt to 1 and start_cnt to 1 to begin the division process.\n\nDivision Process(If start_cnt is high, the module performs the following steps):\nIf the counter cnt reaches 8 (most significant bit of cnt is set), the division is complete:\ncnt and start_cnt are cleared.\nUpdates the shift register SR with the final remainder and quotient.\nOtherwise, the counter cnt is incremented, and the shift register SR is updated based on the subtraction result:\nComputes the subtraction of NEG_DIVISOR.\nUses a multiplexer to select the appropriate result based on the carry-out.\nUpdates SR by shifting left and inserting the carry-out.\n\nResult Validity:\nres_valid is managed based on the reset signal, the counter, and whether the result has been consumed.\n\nGive me the complete code.", "gloden_code": "`timescale 1ns/1ps\nmodule verified_radix2_div(\n    input wire clk,\n    input wire rst,\n    input wire [7:0] dividend,    \n    input wire [7:0] divisor,    \n    input wire sign,       \n\n    input wire opn_valid,   \n    output reg res_valid,   \n    input wire res_ready,   \n    output wire [15:0] result\n);\n\n    reg [7:0] dividend_save, divisor_save;\n    reg [15:0] SR;                  \n    reg [8 :0] NEG_DIVISOR;        \n    wire [7:0] REMAINER, QUOTIENT;\n    assign REMAINER = SR[15:8];\n    assign QUOTIENT = SR[7: 0];\n\n    wire [7:0] divident_abs;\n    wire [8:0] divisor_abs;\n    wire [7:0] remainer, quotient;\n\n    assign divident_abs = (sign & dividend[7]) ? ~dividend + 1'b1 : dividend;\n    assign remainer = (sign & dividend_save[7]) ? ~REMAINER + 1'b1 : REMAINER;\n    assign quotient = sign & (dividend_save[7] ^ divisor_save[7]) ? ~QUOTIENT + 1'b1 : QUOTIENT;\n    assign result = {remainer,quotient};\n\n    wire CO;\n    wire [8:0] sub_result;\n    wire [8:0] mux_result;\n\n    assign {CO,sub_result} = {1'b0,REMAINER} + NEG_DIVISOR;\n\n    assign mux_result = CO ? sub_result : {1'b0,REMAINER};\n\n    reg [3:0] cnt;\n    reg start_cnt;\n    always @(posedge clk) begin\n        if(rst) begin\n            SR <= 0;\n            dividend_save <= 0;\n            divisor_save <= 0;\n\n            cnt <= 0;\n            start_cnt <= 1'b0;\n        end\n        else if(~start_cnt & opn_valid & ~res_valid) begin\n            cnt <= 1;\n            start_cnt <= 1'b1;\n        \n            dividend_save <= dividend;\n            divisor_save <= divisor;\n\n            SR[15:0] <= {7'b0,divident_abs,1'b0}; \n            NEG_DIVISOR <= (sign & divisor[7]) ? {1'b1,divisor} : ~{1'b0,divisor} + 1'b1; \n        end\n        else if(start_cnt) begin\n            if(cnt[3]) begin    \n                cnt <= 0;\n                start_cnt <= 1'b0;\n                \n                SR[15:8] <= mux_result[7:0];\n                SR[0] <= CO;\n            end\n            else begin\n                cnt <= cnt + 1;\n\n                SR[15:0] <= {mux_result[6:0],SR[7:1],CO,1'b0}; \n            end\n        end\n    end\n\n    wire data_go;\n    assign data_go = res_valid & res_ready;\n    always @(posedge clk) begin\n        res_valid <= rst     ? 1'b0 :\n                     cnt[3]  ? 1'b1 :\n                     data_go ? 1'b0 : res_valid;\n    end\nendmodule"}
{"task_id": "div_16bit", "prompt": "Please act as a professional verilog designer.\n\nImplement a 16-bit divider module, the dividend is 16-bit and the divider is 8-bit in combinational logic. Extract the higher bits of the dividend, matching the bit width of the divisor. Compare these bits with the divisor: if the dividend bits are greater, set the quotient to 1, otherwise set it to 0, and use the difference as the remainder. Concatenate the remainder with the highest remaining 1-bit of the dividend, and repeat the process until all dividend bits are processed.\n\nModule name:\n    div_16bit\n\nInput ports:\n    A: 16-bit dividend.\n    B: 8-bit divisor.\n\nOutput ports:\n    result: 16-bit quotient.\n    odd: 16-bit remainder.\n\nImplementation:\nThe module uses two always blocks to perform the division operation.\nThe first always block is a combinational block triggered by any change in the input values A and B. It updates the values of two registers, a_reg and b_reg, with the values of A and B, respectively.\nThe second always block is also a combinational block triggered by any change in the input values A and B.\n\nGive me the complete code.", "gloden_code": "module verified_div_16bit(\n    input wire [15:0] A,\n    input wire [7:0] B,\n    output wire [15:0] result,\n    output wire [15:0] odd\n    );\n\nreg [15:0] a_reg;\nreg [15:0] b_reg;\nreg [31:0] tmp_a;\nreg [31:0] tmp_b;\ninteger i;\n\nalways@(*) begin\n    a_reg = A;\n    b_reg = B;\nend\n\nalways@(*) begin\n    begin\n        tmp_a = {16'b0, a_reg};\n        tmp_b = {b_reg, 16'b0};\n        for(i = 0;i < 16;i = i+1) begin\n            tmp_a = tmp_a << 1;\n            if (tmp_a >= tmp_b) begin\n                tmp_a = tmp_a - tmp_b + 1;\n            end\n            else begin\n                tmp_a = tmp_a;\n            end\n        end\n    end\nend\n\nassign odd = tmp_a[31:16];\nassign result = tmp_a[15:0];\n\nendmodule"}
{"task_id": "comparator_3bit", "prompt": "Please act as a professional Verilog designer.\n\nImplement a module of a 3-bit comparator for comparing binary numbers.\n\nModule name:  \n    comparator_3bit               \nInput ports:\n    A [2:0]: First 3-bit input operand (the first binary number to compare).\n    B [2:0]: Second 3-bit input operand (the second binary number to compare).\nOutput ports:\n    A_greater: 1-bit output indicating if A is greater than B.\n    A_equal: 1-bit output indicating if A is equal to B.\n    A_less: 1-bit output indicating if A is less than B.\n\nImplementation:\nComparison Logic: The module compares the two 3-bit binary numbers A and B using combinational logic.\n- The outputs A_greater, A_equal, and A_less are determined based on the comparison of A and B.\n- A_greater is set to 1 if A > B, A_equal is set to 1 if A == B, and A_less is set to 1 if A < B.\n\nOutput Encoding: The outputs are mutually exclusive, meaning only one of the three outputs will be high (1) at any given time, based on the comparison results.\n\nGive me the complete code.", "gloden_code": "module comparator_3bit (\n    input [2:0] A,\n    input [2:0] B,\n    output A_greater,\n    output A_equal,\n    output A_less\n);\n\n    assign A_greater = (A > B) ? 1'b1 : 1'b0;\n    assign A_equal = (A == B) ? 1'b1 : 1'b0;\n    assign A_less = (A < B) ? 1'b1 : 1'b0;\n\nendmodule"}
{"task_id": "comparator_4bit", "prompt": "Please act as a professional Verilog designer.\n\nImplement a module of a 4-bit comparator with multiple bit-level comparators in combinational logic.\n\nModule name:  \n    comparator_4bit               \nInput ports:\n    A [3:0]: First 4-bit input operand (binary number to compare).\n    B [3:0]: Second 4-bit input operand (binary number to compare).\nOutput ports:\n    A_greater: 1-bit output indicating if A is greater than B.\n    A_equal: 1-bit output indicating if A is equal to B.\n    A_less: 1-bit output indicating if A is less than B.\n\nImplementation:\nComparison Logic: The module compares the two 4-bit binary numbers A and B using combinational logic.\n- A subtraction operation is performed: A - B. The result of this subtraction helps determine whether A is greater than, equal to, or less than B.\n- Carry Generation: If a borrow occurs during the subtraction, A is less than B (A_less).\n- If no borrow occurs and the result of subtraction is non-zero, A is greater than B (A_greater).\n- If A and B are equal, the result of subtraction is zero (A_equal).\n\nOutput Encoding: The outputs (A_greater, A_equal, A_less) are mutually exclusive, ensuring only one of the three outputs is high (1) at any given time.\n\nGive me the complete code.", "gloden_code": "module comparator_4bit(\n    input [3:0] A,   // First 4-bit input operand\n    input [3:0] B,   // Second 4-bit input operand\n    output A_greater, \n    output A_equal,   \n    output A_less     \n);\n\n    wire [3:0] diff;  \n    wire cout;       \n\n    assign {cout, diff} = A - B;\n\n    // A > B: if there's no borrow and the difference isn't zero\n    assign A_greater = (~cout && diff != 4'b0000);\n\n    assign A_equal = (A == B);\n\n    assign A_less = cout;\n\nendmodule"}
{"task_id": "multi_8bit", "prompt": "Please act as a professional Verilog designer.\n\nImplement a module of an 8-bit multiplier based on shifting and adding operations.\n\nModule name:  \n    multi_8bit               \nInput ports:\n    A [7:0]: First 8-bit input operand (representing a multiplicand).\n    B [7:0]: Second 8-bit input operand (representing a multiplier).\nOutput ports:\n    product [15:0]: 16-bit output representing the product of the two 8-bit inputs (A * B).\n\nImplementation:\nMultiplication: The module performs multiplication of A and B using the shift-and-add method.\n- The algorithm iterates through each bit of the multiplier (B). For each bit that is set (1), the multiplicand (A) is added to the product at the corresponding shifted position.\n- The process continues until all bits of the multiplier have been processed.\n\nShifting: After each addition, the multiplicand is logically shifted left by one bit to prepare for the next addition, simulating the traditional multiplication process.\n\nThe final product is stored in the output port, which is 16 bits wide to accommodate the maximum possible product of two 8-bit numbers.\n\nGive me the complete code.", "gloden_code": "module multi_8bit (\n  input [7:0] A,\n  input [7:0] B,\n  output reg [15:0] product\n);\n\n  reg [7:0] multiplicand;\n  reg [3:0] shift_count;\n\n  always @* begin\n    product = 16'b0; \n    multiplicand = A; \n    shift_count = 0;  \n\n    for (int i = 0; i < 8; i = i + 1) begin\n      if (B[i] == 1) begin\n        product = product + (multiplicand << shift_count);\n      end\n      shift_count = shift_count + 1;\n    end\n  end\n\nendmodule"}
{"task_id": "multi_pipe_4bit", "prompt": "Please act as a professional verilog designer.\n\nImplement the design of 4bit unsigned number pipeline multiplier. It consists of two levels of registers to store intermediate values and control the multiplication process.\n\nModule name:  \n    multi_pipe_4bit \n\nInput ports:\n    clk: Clock signal used for synchronous operation.\n    rst_n: Active-low reset signal. Defined as 0 for chip reset and 1 for reset signal inactive.\n    mul_a: Input signal representing the multiplicand with a data width of \"size\" bits.\n    mul_b: Input signal representing the multiplier with a data width of \"size\" bits.\t\n\nOutput ports:\n    mul_out: Product output signal with a data width of 2*size bits.\n\nParameter:\n    size = 4\n\nImplementation:\nExtension of input signals:\nThe input signals (mul_a and mul_b) are extended by adding \"size\" number of zero bits at the most significant bit positions.\nMultiplication operation:\nThe module uses a generate block to perform multiplication for each bit position of the multiplier (mul_b) and generate the partial products.\nFor each bit position i from 0 to size-1, the partial product is calculated as follows:\nIf the corresponding bit in the multiplier is 1, the multiplicand is left-shifted by i positions.\nIf the corresponding bit in the multiplier is 0, the partial product is set to 0 ('d0).\nAdd of partial products:\nThe module uses registers to store the intermediate sum values.\nOn the positive edge of the clock signal (clk) or the falling edge of the reset signal (rst_n), the module performs add operations.\nIf the reset signal (rst_n) is low, indicating a reset condition, the registers are set to 0.\nIf the reset signal (rst_n) is high, the registers are updated with the sum of the corresponding partial products.\nFinal product calculation:\nOn the positive edge of the clock signal (clk) or the falling edge of the reset signal (rst_n), the module calculates the final product.\nIf the reset signal (rst_n) is low, indicating a reset condition, the product output (mul_out) is set to 0.\nIf the reset signal (rst_n) is high, the product output (mul_out) is updated with the sum of registers.\n\nGive me the complete code.", "gloden_code": "`timescale 1ns/1ns\nmodule verified_multi_pipe#(\n\tparameter size = 4\n)(\n\tinput \t\t\t\t\t\tclk \t\t,   \n\tinput \t\t\t\t\t\trst_n\t\t,\n\tinput\t[size-1:0]\t\t\tmul_a\t\t,\n\tinput\t[size-1:0]\t\t\tmul_b\t\t,\n \n \toutput\treg\t[size*2-1:0]\tmul_out\t\t\n);\n\nparameter N = 2 * size;\n\nreg     [N-1:0]     sum_tmp1                ;\nreg     [N-1:0]     sum_tmp2                ;\nwire    [N-1:0]     mul_a_extend            ;\nwire    [N-1:0]     mul_b_extend            ;\n\nwire    [N-1:0]     mul_result[size-1:0]    ;\n\ngenvar i;\ngenerate\n    for(i = 0; i < size; i = i + 1) begin:add\n        assign mul_result[i] = mul_b[i] ? mul_a_extend << i : 'd0;\n    end\nendgenerate\n\nassign mul_a_extend = {{size{1'b0}}, mul_a};\nassign mul_b_extend = {{size{1'b0}}, mul_b};\n\nalways @(posedge clk or negedge rst_n) begin\n    if(!rst_n) begin\n        sum_tmp1 <= 'd0;\n        sum_tmp2 <= 'd0;\n    end\n    else begin\n        sum_tmp1 <= mul_result[0] + mul_result[1];\n        sum_tmp2 <= mul_result[2] + mul_result[3];\n    end\nend\n\nalways @(posedge clk or negedge rst_n) begin\n    if(!rst_n) begin\n        mul_out <= 'd0;\n    end\n    else begin\n        mul_out <= sum_tmp1 + sum_tmp2;\n    end\nend\n\nendmodule"}
{"task_id": "multi_booth_8bit", "prompt": "Please act as a professional verilog designer.\n\nImplement an 8-bit Radix-4 booth multiplier that performs the multiplication of two 8-bit inputs (a and b) using the Booth algorithm. It utilizes a clock signal (clk), and a reset signal (reset), and provides the product output (p) and a ready signal (rdy). The ready signal (rdy) is set to 1 to indicate the completion of the multiplication process.\n\nModule name:  \n   multi_booth_8bit  \n\nInput ports:\n   clk: Clock signal used for synchronous operation.\n   reset: Reset signal used to initialize the multiplier module.\n   a: 8-bit input representing the multiplicand.\n   b: 8-bit input representing the multiplier.\n\nOutput ports:\n   p: 16-bit output representing the product of the multiplication.\n   rdy: Ready signal indicating the completion of the multiplication operation.\n\nImplementation:\nOn the positive edge of the clock signal (clk) or the positive edge of the reset signal (reset), the module performs the multiplication process.\nIf the reset signal (reset) is high, two 16-bit registers multiplier <= {{8{a[7]}}, a} and multiplicand <= {{8{b[7]}}, b}. \nIf the reset signal (reset) is low, indicating normal operation, the module checks if the counter (5bit ctr) is less than 16.\nIf the counter (ctr) is less than 16, the multiplicand register (multiplicand) is left-shifted by 1 to simulate the Booth algorithm's shifting operation.\nIf the current bit of the multiplier register (multiplier[ctr]) is 1, indicating a positive Booth encoding, the product register (p) accumulates the value of the multiplicand register (multiplicand).\nThe counter (ctr) is incremented by 1. Once the counter (ctr) reaches 16, indicating the completion of the multiplication process, the ready signal (rdy) is set to 1.\n\nGive me the complete code.", "gloden_code": "`timescale 1ns / 1ps\n\nmodule verified_multi_booth_8bit (p, rdy, clk, reset, a, b);\n   input clk, reset;\n   input [7:0] a, b;\n   output [15:0] p;\n   output rdy;\n   \n   reg [15:0] p;\n   reg [15:0] multiplier;\n   reg [15:0] multiplicand;\n   reg rdy;\n   reg [4:0] ctr;\n\nalways @(posedge clk or posedge reset) begin\n    if (reset) \n    begin\n    rdy     <= 0;\n    p   <= 0;\n    ctr     <= 0;\n    multiplier <= {{8{a[7]}}, a};\n    multiplicand <= {{8{b[7]}}, b};\n    end \n    else \n    begin \n      if(ctr < 16) \n          begin\n          multiplicand <= multiplicand << 1;\n            if (multiplier[ctr] == 1)\n            begin\n                p <= p + multiplicand;\n            end\n            ctr <= ctr + 1;\n          end\n       else \n           begin\n           rdy <= 1;\n           end\n    end\n  end //End of always block\n    \nendmodule"}
{"task_id": "multi_16bit", "prompt": "Please act as a professional verilog designer.\n\nImplement the design of an unsigned 16-bit multiplier. It utilizes shift and accumulate operations to generate the product output (yout). The module also includes control signals such as clock (clk), reset (rst_n), and start (start), along with a completion flag (done) indicating the completion of the multiplication operation.\n\nModule name:  \n    multi_16bit  \n\nInput ports:\n    clk: Chip clock signal.\n    rst_n: Active-low reset signal. Defined as 0 for chip reset and 1 for reset signal inactive.\n    start: Chip enable signal to initiate the multiplication operation.\n    ain: Input signal representing the multiplicand (a) with a data width of 16 bits.\n    bin: Input signal representing the multiplier (b) with a data width of 16 bits.\n\nOutput ports:\n    yout: Product output signal with a data width of 32 bits.\n    done: Chip output flag signal. Defined as 1 indicates the completion of the multiplication operation.\n\nImplementation:\nData bit control:\nOn every positive edge of the clock signal (clk) or the falling edge of the reset signal (rst_n), the shift count register (i) is updated.\nIf the reset signal (rst_n) is low, indicating a reset condition, the shift count register (i) is set to 0.\nIf the start signal is active (start) and the shift count register (i) is less than 17, the shift count register (i) increments by 1.\nIf the start signal is inactive (!start), the shift count register (i) is reset to 0.\nMultiplication completion flag generation:\nOn every positive edge of the clock signal (clk) or the falling edge of the reset signal (rst_n), the multiplication completion flag (done_r) is updated.\nIf the reset signal (rst_n) is low, the multiplication completion flag (done_r) is set to 0.\nIf the shift count register (i) is equal to 16, indicating the completion of the multiplication operation, the multiplication completion flag (done_r) is set to 1.\nIf the shift count register (i) is equal to 17, the multiplication completion flag (done_r) is reset to 0.\nShift and accumulate operation:\nOn every positive edge of the clock signal (clk) or the falling edge of the reset signal (rst_n), the module performs the shift and accumulate operation.\nIf the reset signal (rst_n) is low, indicating a reset condition, the multiplicand register (areg), multiplier register (breg), and product register (yout_r) are reset to 0.\nIf the start signal is active (start), the module starts the multiplication operation.\nWhen the shift count register (i) is 0, the multiplicand (ain) and multiplier (bin) are stored in the respective registers (areg and breg).\nFor shift counts greater than 0 and less than 17, if the bit at position i-1 in the multiplicand register (areg) is high, the product register (yout_r) accumulates the shifted value of the multiplier register (breg) by shifting it left by i-1 positions and appending zeros at the least significant bit positions.\nOutput assignment:\nThe product output (yout) is assigned the value of the product register (yout_r).\n\nGive me the complete code.", "gloden_code": "module verified_multi_16bit(\n    input clk,          // Chip clock signal.\n    input rst_n,        // Active-low reset signal. Defined as 0 for chip reset; defined as 1 for reset signal inactive.\n    input start,        // Chip enable signal. \n    input [15:0] ain,   // Input a (multiplicand) with a data width of 16 bits.\n    input [15:0] bin,   // Input b (multiplier) with a data width of 16 bits.\n\n    output [31:0] yout, // Product output with a data width of 32 bits.\n    output done         // Chip output flag signal. Defined as 1 indicates multiplication operation completion.\n);\n\nreg [15:0] areg;    // Multiplicand a register.\nreg [15:0] breg;    // Multiplier b register.\nreg [31:0] yout_r;  // Product register.\nreg done_r;\nreg [4:0] i;        // Shift count register.\n\n\n//------------------------------------------------\n// Data bit control\nalways @(posedge clk or negedge rst_n)\n    if (!rst_n) i <= 5'd0;\n    else if (start && i < 5'd17) i <= i + 1'b1; \n    else if (!start) i <= 5'd0;\n\n//------------------------------------------------\n// Multiplication completion flag generation\nalways @(posedge clk or negedge rst_n)\n    if (!rst_n) done_r <= 1'b0;\n    else if (i == 5'd16) done_r <= 1'b1; // Multiplication completion flag\n    else if (i == 5'd17) done_r <= 1'b0; // Flag reset\n\nassign done = done_r;\n\n//------------------------------------------------\n// Dedicated register for shift and accumulate operation\nalways @(posedge clk or negedge rst_n) begin\n    if (!rst_n) begin \n        areg <= 16'h0000;\n        breg <= 16'h0000;\n        yout_r <= 32'h00000000;\n    end\n    else if (start) begin // Start operation\n        if (i == 5'd0) begin // Store multiplicand and multiplier\n            areg <= ain;\n            breg <= bin;\n        end\n        else if (i > 5'd0 && i < 5'd17) begin\n            if (areg[i-1]) \n            yout_r <= yout_r + ({16'h0000, breg} << (i-1)); // Accumulate and shift\n        end\n    end\nend\n\nassign yout = yout_r;\n\nendmodule"}
{"task_id": "multi_pipe_8bit", "prompt": "Please act as a professional verilog designer.\n\nImplement the design of unsigned 8bit multiplier based on pipelining processing. It utilizes a clock signal (clk), an active-low reset signal (rst_n), an input enable signal (mul_en_in), and provides an output enable signal (mul_en_out) and the product output (mul_out) of size 16 bits.\n\nModule name:  \n    multi_pipe_8bit \n\nInput ports:\n    clk: Clock signal used for synchronous operation.\n    rst_n: Active-low reset signal. Defined as 0 for chip reset and 1 for reset signal inactive.\n    mul_en_in: Input enable signal that controls the multiplication operation.\n    mul_a: Input signal representing the multiplicand with a data width of 8 bits.\n    mul_b: Input signal representing the multiplier with a data width of 8 bits.\n\nOutput ports:\n    mul_en_out: Output enable signal indicating if the multiplication operation is enabled.\n    mul_out: Product output signal with a data width of 16 bits.\n\nImplementation:\nThe module utilizes a pipeline architecture to improve performance. It consists of several key components:\nInput Control:\nThe module includes an input enable signal, mul_en_in, which controls the multiplication operation.\nOn the positive edge of the clock signal, the module samples the input enable signal and stores it in a register, mul_en_out_reg.\nThe output enable signal, mul_en_out, is derived from the most significant bit of mul_en_out_reg, indicating whether the multiplication operation is enabled.\n\nInput Registers:\nThe module includes registers, mul_a_reg and mul_b_reg, to store the input multiplicand and multiplier, respectively.\nOn the positive edge of the clock signal, the module samples the input values and stores them in the corresponding registers.\nThe registers are only updated when the input enable signal is active.\n\nPartial Product Generation:\nThe module generates partial products by performing bitwise operations between the multiplicand and the individual bits of the multiplier.\nIt uses conditional assignments to select the appropriate bits from the multiplicand based on the multiplier bits.\nThe partial products are stored in a set of wires, temp, with each wire representing a different bit position.\n\nPartial Sum Calculation:\nThe module performs addition operations on the partial products to calculate partial sums.\nIt uses a set of registers, sum, to store the intermediate sum values.\nEach register corresponds to a group of partial products and is updated on the positive edge of the clock signal.\n\nFinal Product Calculation:\nThe module sums up all the partial sums to obtain the final product.\nIt uses a register, mul_out_reg, to store the accumulated sum.\nOn the positive edge of the clock signal, the register is updated with the sum of all partial sums.\n\nOutput Assignment:\nThe module assigns the output product value, mul_out, based on the output enable signal and the value in mul_out_reg.\nIf the output enable signal is active, indicating a valid product, the value in mul_out_reg is assigned to mul_out.\nOtherwise, mul_out is set to 0.\n\nGive me the complete code.", "gloden_code": "module verified_multi_pipe_8bit#(\n    parameter size = 8\n)(\n          clk,      \n          rst_n,       \n          mul_a,       \n          mul_b, \n          mul_en_in,\n \n          mul_en_out,      \n          mul_out    \n);\n \n   input clk;           \n   input rst_n; \n   input mul_en_in;      \n   input [size-1:0] mul_a;       \n   input [size-1:0] mul_b;       \n \n   output reg mul_en_out;  \n   output reg [size*2-1:0] mul_out;    \n \n            \n   reg [2:0] mul_en_out_reg;\n always@(posedge clk or negedge rst_n)\n       if(!rst_n)begin\n            mul_en_out_reg <= 'd0;             \n            mul_en_out     <= 'd0;                           \n       end\n       else begin\n            mul_en_out_reg <= {mul_en_out_reg[1:0],mul_en_in};            \n            mul_en_out     <= mul_en_out_reg[2];                  \n       end\n \n \n    reg [7:0] mul_a_reg;\n    reg [7:0] mul_b_reg;\n  always @(posedge clk or negedge rst_n)\n         if(!rst_n) begin\n              mul_a_reg <= 'd0;\n              mul_a_reg <= 'd0;\n         end\n         else begin\n              mul_a_reg <= mul_en_in ? mul_a :'d0;\n              mul_b_reg <= mul_en_in ? mul_b :'d0;\n         end\n \n  \n     wire [15:0] temp [size-1:0];\n  assign temp[0] = mul_b_reg[0]? {8'b0,mul_a_reg} : 'd0;\n  assign temp[1] = mul_b_reg[1]? {7'b0,mul_a_reg,1'b0} : 'd0;\n  assign temp[2] = mul_b_reg[2]? {6'b0,mul_a_reg,2'b0} : 'd0;\n  assign temp[3] = mul_b_reg[3]? {5'b0,mul_a_reg,3'b0} : 'd0;\n  assign temp[4] = mul_b_reg[4]? {4'b0,mul_a_reg,4'b0} : 'd0;\n  assign temp[5] = mul_b_reg[5]? {3'b0,mul_a_reg,5'b0} : 'd0;\n  assign temp[6] = mul_b_reg[6]? {2'b0,mul_a_reg,6'b0} : 'd0;\n  assign temp[7] = mul_b_reg[7]? {1'b0,mul_a_reg,7'b0} : 'd0; \n \n \n     reg [15:0] sum [3:0];//[size/2-1:1]\n always @(posedge clk or negedge rst_n) \n       if(!rst_n) begin\n          sum[0]  <= 'd0;\n          sum[1]  <= 'd0;\n          sum[2]  <= 'd0;\n          sum[3]  <= 'd0;\n       end \n       else begin\n          sum[0] <= temp[0] + temp[1];\n          sum[1] <= temp[2] + temp[3];\n          sum[2] <= temp[4] + temp[5];\n          sum[3] <= temp[6] + temp[7];\n       end\n \n     reg [15:0] mul_out_reg;\n always @(posedge clk or negedge rst_n) \n       if(!rst_n)\n          mul_out_reg <= 'd0;\n       else \n          mul_out_reg <= sum[0] + sum[1] + sum[2] + sum[3];\n \n \n always @(posedge clk or negedge rst_n) \n       if(!rst_n)\n          mul_out <= 'd0;\n       else if(mul_en_out_reg[2])\n          mul_out <= mul_out_reg;\n       else\n          mul_out <= 'd0;\n \n          \nendmodule"}
{"task_id": "adder_bcd", "prompt": "Please act as a professional verilog designer.\n\nImplement a module of a 4-bit BCD adder for decimal arithmetic operations. \n\nModule name:  \n    adder_bcd               \nInput ports:\n    A [3:0]: First BCD input (4-bit, representing a decimal digit from 0 to 9).\n    B [3:0]: Second BCD input (4-bit, representing a decimal digit from 0 to 9).\n    Cin: Carry-in input (1-bit).\nOutput ports:\n    Sum [3:0]: 4-bit output representing the sum of the two BCD inputs, corrected to be a valid BCD digit (0\u20139).\n    Cout: Carry-out output (1-bit), used when the sum exceeds the decimal value of 9.\n\nImplementation:\nAddition: The module performs binary addition of A, B, and Cin.\nBCD Correction: If the sum exceeds 9 (binary 1001), a correction of 6 (binary 0110) is added to the sum. This correction ensures that the result is within the BCD range.\nCarry Generation: If the result of the addition exceeds 9, a carry-out (Cout) is generated, signaling that the BCD sum exceeds a single decimal digit.\n\nGive me the complete code.", "gloden_code": "module adder_bcd (\n    input  [3:0] A,   // First BCD number (0-9)\n    input  [3:0] B,   // Second BCD number (0-9)\n    input  Cin,       // Input carry\n    output [3:0] Sum, // BCD sum (0-9)\n    output Cout       // Output carry\n);\n    wire [4:0] temp_sum;        // Temporary 5-bit sum to store initial result\n    wire [3:0] corrected_sum;   // Adjusted BCD sum\n    wire carry_out;             // Corrected carry-out\n\n    // Step 1: Perform binary addition of A, B, and Cin\n    assign temp_sum = A + B + Cin;\n\n    // Step 2: If the sum is greater than 9, adjust the sum by adding 6\n    assign carry_out = (temp_sum > 9) ? 1 : 0;  // If sum exceeds 9, set carry\n    assign corrected_sum = (temp_sum > 9) ? (temp_sum + 4'b0110) : temp_sum;  // Add 6 to correct BCD\n\n    // Output the corrected sum and the carry\n    assign Sum = corrected_sum[3:0];  // The BCD sum is the lower 4 bits\n    assign Cout = carry_out;          // Output the carry\nendmodule"}
{"task_id": "adder_pipe_64bit", "prompt": "Please act as a professional verilog designer.\n\nImplement a module of a 64-bit ripple carry adder, which includes several registers to enable the pipeline stages. The output result is available on the result port, and the o_en = 1 indicates the availability of the result.\n\nModule name:  \n    adder_pipe_64bit               \nInput ports:\n    clk: Clock input\n    rst_n: Active low reset signal\n    i_en: Enable signal for addition operation\n    adda: 64-bit input operand A\n    addb: 64-bit input operand B\n   \nOutput ports:\n    result: 65-bit output representing the sum of adda and addb.\n    o_en: Output enable signal.   \n\nImplementation:\nThe module includes several registers to enable the pipeline stages and synchronize the input enable signal (i_en). These registers are controlled by the clock (clk) and reset (rst_n) signals.\nThe sum values for each pipeline stage are calculated by adding the corresponding input operands and carry signals.\nThe output enable signal (o_en) is updated based on the pipeline stages and synchronized with the clock (clk) and reset (rst_n) signals.\n\nGive me the complete code.", "gloden_code": "module verified_adder_64bit\n#(\n    parameter DATA_WIDTH = 64,\n    parameter STG_WIDTH = 16\n)\n(\n    input clk,\n    input rst_n,\n    input i_en,\n    input [DATA_WIDTH-1:0] adda,\n    input [DATA_WIDTH-1:0] addb,\n    output [DATA_WIDTH:0] result,\n    output reg o_en\n);\n\nreg stage1;\nreg stage2;\nreg stage3;\n\nwire [STG_WIDTH-1:0] a1;\nwire [STG_WIDTH-1:0] b1;\nwire [STG_WIDTH-1:0] a2;\nwire [STG_WIDTH-1:0] b2;\nwire [STG_WIDTH-1:0] a3;\nwire [STG_WIDTH-1:0] b3;\nwire [STG_WIDTH-1:0] a4;\nwire [STG_WIDTH-1:0] b4;\n\nreg [STG_WIDTH-1:0] a2_ff1;\nreg [STG_WIDTH-1:0] b2_ff1;\n\nreg [STG_WIDTH-1:0] a3_ff1;\nreg [STG_WIDTH-1:0] b3_ff1;\nreg [STG_WIDTH-1:0] a3_ff2;\nreg [STG_WIDTH-1:0] b3_ff2;\n\nreg [STG_WIDTH-1:0] a4_ff1;\nreg [STG_WIDTH-1:0] b4_ff1;\nreg [STG_WIDTH-1:0] a4_ff2;\nreg [STG_WIDTH-1:0] b4_ff2;\nreg [STG_WIDTH-1:0] a4_ff3;\nreg [STG_WIDTH-1:0] b4_ff3;\n\nreg c1;\nreg c2;\nreg c3;\nreg c4;\n\nreg [STG_WIDTH-1:0] s1;\nreg [STG_WIDTH-1:0] s2;\nreg [STG_WIDTH-1:0] s3;\nreg [STG_WIDTH-1:0] s4;\n\nreg [STG_WIDTH-1:0] s1_ff1;\nreg [STG_WIDTH-1:0] s1_ff2;\nreg [STG_WIDTH-1:0] s1_ff3;\n\nreg [STG_WIDTH-1:0] s2_ff1;\nreg [STG_WIDTH-1:0] s2_ff2;\n\nreg [STG_WIDTH-1:0] s3_ff1;\n\nassign a1 = adda[STG_WIDTH-1:0];\nassign b1 = addb[STG_WIDTH-1:0];\nassign a2 = adda[STG_WIDTH*2-1:16];\nassign b2 = addb[STG_WIDTH*2-1:16];\nassign a3 = adda[STG_WIDTH*3-1:32];\nassign b3 = addb[STG_WIDTH*3-1:32];\nassign a4 = adda[STG_WIDTH*4-1:48];\nassign b4 = addb[STG_WIDTH*4-1:48];\n\nalways @(posedge clk, negedge rst_n) begin\n    if (!rst_n) begin\n        stage1 <= 1'b0;\n        stage2 <= 1'b0;\n        stage3 <= 1'b0;\n        o_en <= 1'b0;\n    end\n    else begin\n        stage1 <= i_en;\n        stage2 <= stage1;\n        stage3 <= stage2;\n        o_en <= stage3;\n    end\nend\n\nalways @(posedge clk, negedge rst_n) begin\n    if (!rst_n) begin\n        a2_ff1 <= 'd0;\n        b2_ff1 <= 'd0;\n        a3_ff1 <= 'd0;\n        b3_ff1 <= 'd0;\n        a3_ff2 <= 'd0;\n        b3_ff2 <= 'd0;\n        a4_ff1 <= 'd0;\n        b4_ff1 <= 'd0;\n        a4_ff2 <= 'd0;\n        b4_ff2 <= 'd0;\n        a4_ff3 <= 'd0;\n        b4_ff3 <= 'd0;\n    end\n    else begin\n        a2_ff1 <= a2;\n        b2_ff1 <= b2;\n        a3_ff1 <= a3;\n        b3_ff1 <= b3;\n        a3_ff2 <= a3_ff1;\n        b3_ff2 <= b3_ff1;\n        a4_ff1 <= a4;\n        b4_ff1 <= b4;\n        a4_ff2 <= a4_ff1;\n        b4_ff2<= b4_ff1;\n        a4_ff3 <= a4_ff2;\n        b4_ff3 <= b4_ff2;\n    end\nend\n\nalways @(posedge clk, negedge rst_n) begin\n    if (!rst_n) begin\n        s1_ff1 <= 'd0;\n        s1_ff2 <= 'd0;\n        s1_ff3 <= 'd0;\n        s2_ff1 <= 'd0;\n        s2_ff2 <= 'd0;\n        s3_ff1 <= 'd0;\n    end\n    else begin\n        s1_ff1 <= s1;\n        s1_ff2 <= s1_ff1;\n        s1_ff3 <= s1_ff2;\n        s2_ff1 <= s2;\n        s2_ff2 <= s2_ff1;\n        s3_ff1 <= s3;\n    end\nend\n\nalways @(posedge clk, negedge rst_n) begin\n    if (!rst_n) begin\n        c1 <= 1'b0;\n        s1 <= 'd0;\n    end\n    else if (i_en) begin\n        {c1, s1} <= a1 + b1;\n    end\n    else begin\n        c1 <= c1;\n        s1 <= s1;\n    end\nend\n\nalways @(posedge clk, negedge rst_n) begin\n    if (!rst_n) begin\n        c2 <= 1'b0;\n        s2 <= 'd0;\n    end\n    else if (stage1) begin\n        {c2, s2} <= a2_ff1 + b2_ff1 + c1;\n    end\n    else begin\n        c2 <= c2;\n        s2 <= s2;\n    end\nend\n\nalways @(posedge clk, negedge rst_n) begin\n    if (!rst_n) begin\n        c3 <= 1'b0;\n        s3 <= 'd0;\n    end\n    else if (stage2) begin\n        {c3, s3} <= a3_ff2 + b3_ff2 + c2;\n    end\n    else begin\n        c3 <= c3;\n        s3 <= s3;\n    end\nend\n\nalways @(posedge clk, negedge rst_n) begin\n    if (!rst_n) begin\n        c4 <= 1'b0;\n        s4 <= 'd0;\n    end\n    else if (stage3) begin\n        {c4, s4} <= a4_ff3 + b4_ff3 + c3;\n    end\n    else begin\n        c4 <= c4;\n        s4 <= s4;\n    end\nend\n\nassign result = {c4, s4, s3_ff1, s2_ff2, s1_ff3};\n\nendmodule"}
{"task_id": "adder_16bit", "prompt": "Please act as a professional verilog designer.\n\nImplement a module of a 16-bit full adder in combinational logic.\n\nModule name:  \n    adder_16bit               \nInput ports:\n    a[15:0]: 16-bit input operand A.\n    b[15:0]: 16-bit input operand B.\n    Cin: Carry-in input.\nOutput ports:\n    y[15:0]: 16-bit output representing the sum of A and B.\n    Co: Carry-out output.\n\nImplementation:\nIn the adder_16bit module, you need to design a small bit-width adder(8-bit adder), which will be instantiated multiple times.\n\nGive me the complete code.", "gloden_code": "module verified_adder_16bit (\n    input wire [15:0] a,\n    input wire [15:0] b,\n    input wire Cin,\n    output wire [15:0] y,\n    output wire Co\n);\n \n    wire Co_temp;\n \n    add8 add8_inst1 (\n        .a(a[15:8]),\n        .b(b[15:8]),\n        .Cin(Co_temp), \n        .y(y[15:8]),\n        .Co(Co)\n    );\n \n    add8 add8_inst2 (\n        .a(a[7:0]),\n        .b(b[7:0]),\n        .Cin(Cin),\n        .y(y[7:0]),\n        .Co(Co_temp)\n    ); \n \nendmodule\n\nmodule add8 (\n    input wire [7:0] a,\n    input wire [7:0] b,\n    input wire Cin,\n    output wire [7:0] y,\n    output wire Co\n);\n \n    wire Co_temp;\n \n    add4 add4_inst1 (\n        .a(a[7:4]),\n        .b(b[7:4]),\n        .Cin(Co_temp),\n        .y(y[7:4]),\n        .Co(Co)\n    );\n \n    add4 add4_inst2 (\n        .a(a[3:0]),\n        .b(b[3:0]),\n        .Cin(Cin),\n        .y(y[3:0]),\n        .Co(Co_temp)\n    );\n \nendmodule\n\nmodule add4 (\n    input wire [3:0] a,\n    input wire [3:0] b,\n    input wire Cin,\n    output wire [3:0] y,\n    output wire Co\n);\n \n    wire Co_temp;\n \n    add2 add2_inst1 (\n        .a(a[3:2]),\n        .b(b[3:2]),\n        .Cin(Co_temp),\n        .y(y[3:2]),\n        .Co(Co)\n    );\n \n    add2 add2_inst2 (\n        .a(a[1:0]),\n        .b(b[1:0]),\n        .Cin(Cin),\n        .y(y[1:0]),\n        .Co(Co_temp)\n    ); \n \nendmodule\n\nmodule add2 (\n    input wire [1:0] a,\n    input wire [1:0] b,\n    input wire Cin,\n    output wire [1:0] y,\n    output wire Co\n);\n \n    wire Co_temp;\n\n    add1 add1_inst1 (\n        .a(a[1]),\n        .b(b[1]),\n        .Cin(Co_temp),\n        .y(y[1]),\n        .Co(Co)\n    );\n \n    add1 add1_inst2 (\n        .a(a[0]),\n        .b(b[0]),\n        .Cin(Cin),\n        .y(y[0]),\n        .Co(Co_temp)\n    );\n         \nendmodule\n\nmodule add1 (\n    input wire a,\n    input wire b,\n    input wire Cin,\n    output wire y,\n    output wire Co\n);\n    assign y = ((~a) & (~b) & Cin | (~a) & b & (~Cin) | a & (~b) & (~Cin) | (a & b & Cin));\n    assign Co = ((~a & b & Cin) | (a & ~b & Cin) | (a & b & ~Cin) | (a & b & Cin));\n\nendmodule"}
{"task_id": "adder_8bit", "prompt": "Please act as a professional verilog designer.\n\nImplement a module of an 8-bit adder with multiple bit-level adders in combinational logic. \n\nModule name:  \n    adder_8bit               \nInput ports:\n    a[7:0]: 8-bit input operand A.\n    b[7:0]: 8-bit input operand B.\n    cin: Carry-in input.\nOutput ports:\n    sum[7:0]: 8-bit output representing the sum of A and B.\n    cout: Carry-out output.\n\nImplementation:\nThe module utilizes a series of bit-level adders (full adders) to perform the addition operation.\n\nGive me the complete code.", "gloden_code": "module verified_adder_8bit(\n    input [7:0] a, b, \n    input cin, \n    output [7:0] sum, \n    output cout);\n    \n    wire [8:0] c;\n\n    full_adder FA0 (.a(a[0]), .b(b[0]), .cin(cin), .sum(sum[0]), .cout(c[0]));\n    full_adder FA1 (.a(a[1]), .b(b[1]), .cin(c[0]), .sum(sum[1]), .cout(c[1]));\n    full_adder FA2 (.a(a[2]), .b(b[2]), .cin(c[1]), .sum(sum[2]), .cout(c[2]));\n    full_adder FA3 (.a(a[3]), .b(b[3]), .cin(c[2]), .sum(sum[3]), .cout(c[3]));\n    full_adder FA4 (.a(a[4]), .b(b[4]), .cin(c[3]), .sum(sum[4]), .cout(c[4]));\n    full_adder FA5 (.a(a[5]), .b(b[5]), .cin(c[4]), .sum(sum[5]), .cout(c[5]));\n    full_adder FA6 (.a(a[6]), .b(b[6]), .cin(c[5]), .sum(sum[6]), .cout(c[6]));\n    full_adder FA7 (.a(a[7]), .b(b[7]), .cin(c[6]), .sum(sum[7]), .cout(c[7]));\n\n    assign cout = c[7]; \nendmodule\n\nmodule full_adder (input a, b, cin, output sum, cout);\n    assign {cout, sum} = a + b + cin;\nendmodule"}
{"task_id": "adder_32bit", "prompt": "Please act as a professional verilog designer.\n\nImplement a module of a carry-lookahead 32-bit adder that uses the Carry-Lookahead Adder (CLA) architecture.\n\nModule name:  \n    adder_32bit               \nInput ports:\n    A[32:1]: 32-bit input operand A.\n    B[32:1]: 32-bit input operand B.\nOutput ports:\n    S[32:1]: 32-bit output representing the sum of A and B.\n    C32: Carry-out output.\n\nImplementation:\nThe top module adder_32bit consists of several instances of the 16 bit CLA block you design.\n\nGive me the complete code.", "gloden_code": "module verified_adder_32bit(A,B,S,C32);\n     input [32:1] A;\n     input [32:1] B;\n     output [32:1] S;\n     output C32;\n\n     wire px1,gx1,px2,gx2;\n     wire c16;\n\n  CLA_16 CLA1(\n      .A(A[16:1]),\n        .B(B[16:1]),\n        .c0(0),\n        .S(S[16:1]),\n        .px(px1),\n        .gx(gx1)\n    );\n\n  CLA_16 CLA2(\n        .A(A[32:17]),\n          .B(B[32:17]),\n          .c0(c16),\n          .S(S[32:17]),\n          .px(px2),\n          .gx(gx2)\n    );\n\n  assign c16 = gx1 ^ (px1 && 0), //c0 = 0\n         C32 = gx2 ^ (px2 && c16);\nendmodule\n\nmodule CLA_16(A,B,c0,S,px,gx);\n    input [16:1] A;\n    input [16:1] B;\n    input c0;\n    output gx,px;\n    output [16:1] S;\n\n    wire c4,c8,c12;\n    wire Pm1,Gm1,Pm2,Gm2,Pm3,Gm3,Pm4,Gm4;\n\n    adder_4 adder1(\n         .x(A[4:1]),\n          .y(B[4:1]),\n          .c0(c0),\n          .c4(),\n          .F(S[4:1]),\n          .Gm(Gm1),\n          .Pm(Pm1)\n    );\n\n    adder_4 adder2(\n         .x(A[8:5]),\n          .y(B[8:5]),\n          .c0(c4),\n          .c4(),\n          .F(S[8:5]),\n          .Gm(Gm2),\n          .Pm(Pm2)\n    );\n\n    adder_4 adder3(\n         .x(A[12:9]),\n          .y(B[12:9]),\n          .c0(c8),\n          .c4(),\n          .F(S[12:9]),\n          .Gm(Gm3),\n          .Pm(Pm3)\n    );\n\n    adder_4 adder4(\n         .x(A[16:13]),\n          .y(B[16:13]),\n          .c0(c12),\n          .c4(),\n          .F(S[16:13]),\n          .Gm(Gm4),\n          .Pm(Pm4)\n    );\n\n    assign   c4 = Gm1 ^ (Pm1 & c0),\n             c8 = Gm2 ^ (Pm2 & Gm1) ^ (Pm2 & Pm1 & c0),\n             c12 = Gm3 ^ (Pm3 & Gm2) ^ (Pm3 & Pm2 & Gm1) ^ (Pm3 & Pm2 & Pm1 & c0);\n\n    assign  px = Pm1 & Pm2 & Pm3 & Pm4,\n            gx = Gm4 ^ (Pm4 & Gm3) ^ (Pm4 & Pm3 & Gm2) ^ (Pm4 & Pm3 & Pm2 & Gm1);\nendmodule\n\nmodule adder_4(x,y,c0,c4,F,Gm,Pm);\n      input [4:1] x;\n      input [4:1] y;\n      input c0;\n      output c4,Gm,Pm;\n      output [4:1] F;\n\n      wire p1,p2,p3,p4,g1,g2,g3,g4;\n      wire c1,c2,c3;\n      adder adder1(\n                 .X(x[1]),\n                     .Y(y[1]),\n                     .Cin(c0),\n                     .F(F[1]),\n                     .Cout()\n                );\n\n      adder adder2(\n                 .X(x[2]),\n                     .Y(y[2]),\n                     .Cin(c1),\n                     .F(F[2]),\n                     .Cout()\n                );  \n\n      adder adder3(\n                 .X(x[3]),\n                     .Y(y[3]),\n                     .Cin(c2),\n                     .F(F[3]),\n                     .Cout()\n                );\n\n      adder adder4(\n                 .X(x[4]),\n                     .Y(y[4]),\n                     .Cin(c3),\n                     .F(F[4]),\n                     .Cout()\n                );      \n\n        CLA CLA(\n            .c0(c0),\n            .c1(c1),\n            .c2(c2),\n            .c3(c3),\n            .c4(c4),\n            .p1(p1),\n            .p2(p2),\n            .p3(p3),\n            .p4(p4),\n            .g1(g1),\n            .g2(g2),\n            .g3(g3),\n            .g4(g4)\n        );\n\n\n\n  assign   p1 = x[1] ^ y[1],      \n           p2 = x[2] ^ y[2],\n           p3 = x[3] ^ y[3],\n           p4 = x[4] ^ y[4];\n\n  assign   g1 = x[1] & y[1],\n           g2 = x[2] & y[2],\n           g3 = x[3] & y[3],\n           g4 = x[4] & y[4];\n\n  assign Pm = p1 & p2 & p3 & p4,\n         Gm = g4 ^ (p4 & g3) ^ (p4 & p3 & g2) ^ (p4 & p3 & p2 & g1);\nendmodule\n\nmodule CLA(c0,c1,c2,c3,c4,p1,p2,p3,p4,g1,g2,g3,g4);\n\n     input c0,g1,g2,g3,g4,p1,p2,p3,p4;\n     output c1,c2,c3,c4;\n\n     assign c1 = g1 ^ (p1 & c0),\n            c2 = g2 ^ (p2 & g1) ^ (p2 & p1 & c0),\n            c3 = g3 ^ (p3 & g2) ^ (p3 & p2 & g1) ^ (p3 & p2 & p1 & c0),\n            c4 = g4^(p4&g3)^(p4&p3&g2)^(p4&p3&p2&g1)^(p4&p3&p2&p1&c0);\nendmodule\n\nmodule adder(X,Y,Cin,F,Cout);\n\n  input X,Y,Cin;\n  output F,Cout;\n\n  assign F = X ^ Y ^ Cin;\n  assign Cout = (X ^ Y) & Cin | X & Y;\nendmodule"}
{"task_id": "accu", "prompt": "Please act as a professional verilog designer.\n\nImplement a module to achieve serial input data accumulation output, input is 8bit data. The valid_in will be set to 1 before the first data comes in. Whenever the module receives 4 input data, the data_out outputs 4 received data accumulation results and sets the valid_out to be 1 (will last only 1 cycle).\n\nModule name:  \n    accu               \nInput ports:\n\tclk: Clock input for synchronization.\n\trst_n: Active-low reset signal.\n\tdata_in[7:0]: 8-bit input data for addition.\n\tvalid_in: Input signal indicating readiness for new data.   \nOutput ports:\n    valid_out: Output signal indicating when 4 input data accumulation is reached.\n\tdata_out[9:0]: 10-bit output data representing the accumulated sum.\n\nImplementation:\nWhen valid_in is 1, data_in is a valid input. Accumulate four valid input data_in values and calculate the output data_out by adding these four values together. \nThere is no output when there are fewer than four data_in inputs in the interim. Along with the output data_out, a cycle of valid_out=1 will appear as a signal. \nThe valid_out signal is set to 1 when the data_out outputs 4 received data accumulation results. Otherwise, it is set to 0.\n\nGive me the complete code.", "gloden_code": "`timescale 1ns/1ns\n\nmodule verified_accu(\n    input               clk         ,   \n    input               rst_n       ,\n    input       [7:0]   data_in     ,\n    input               valid_in     ,\n \n    output  reg         valid_out     ,\n    output  reg [9:0]   data_out\n);\n    \n   reg [1:0] count;\n   wire add_cnt;\n   wire ready_add;\n   wire end_cnt;\n   reg [9:0]   data_out_reg;\n\n   assign add_cnt = ready_add;\n   assign end_cnt = ready_add && (count == 'd3);\n   \n   //count\n   always @(posedge clk or negedge rst_n) begin\n       if(!rst_n) begin\n          count <= 0;\n       end\n       else if(end_cnt) begin\n          count <= 0;\n       end\n       else if(add_cnt) begin\n          count <= count + 1;\n       end\n   end\n\n    //data_out_reg\n   always @(posedge clk or negedge rst_n) begin\n      if(!rst_n) begin\n        data_out_reg <= 0;\n      end\n      else if (add_cnt && count == 0) begin\n          data_out_reg <= data_in;\n      end\n      else if (add_cnt) begin\n          data_out_reg <= data_out_reg + data_in;\n      end\n   end\n\n    //data_out\n   always @(posedge clk or negedge rst_n) begin\n      if(!rst_n) begin\n        data_out <= 0;\n      end\n      else if (add_cnt && count == 0) begin\n          data_out <= data_in;\n      end\n      else if (add_cnt) begin\n          data_out <= data_out + data_in;\n      end\n   end\n\n   //ready_add\n   assign ready_add = !valid_out | valid_in;\n\n   //valid_out\n   always @(posedge clk or negedge rst_n) begin\n       if(!rst_n) begin\n           valid_out <= 0;\n       end\n       else if(end_cnt) begin\n           valid_out <= 1;\n       end\n       else begin\n           valid_out <= 0;\n       end\n   end  \n     \nendmodule"}
{"task_id": "fixed_point_adder", "prompt": "Please act as a professional Verilog designer.\n\nImplement a module of a parameterized fixed-point adder for arithmetic operations with fixed precision.\n\nModule name:  \n    fixed_point_adder               \nInput parameters:\n    Q: Number of fractional bits (precision).\n    N: Total number of bits, including integer and fractional parts.\nInput ports:\n    a [N-1:0]: First N-bit fixed-point input operand.\n    b [N-1:0]: Second N-bit fixed-point input operand.\nOutput ports:\n    c [N-1:0]: N-bit output representing the result of the fixed-point addition.\n\nInternal Registers:\n    res [N-1:0]: N-bit register used to store the result of the addition or subtraction.\n\nImplementation:\n1. Absolute Value Addition:\n    - If the most significant bits (MSBs) of `a` and `b` are the same (both positive or both negative), their absolute values are added.\n    - The MSB of the result is set to match the MSBs of `a` and `b` (sign bit remains consistent).\n\n2. Absolute Value Subtraction:\n    - If the MSBs of `a` and `b` are different (one is positive, the other negative), the larger absolute value is determined.\n    - If `a` is greater than `b`, the result is `a - b` and the MSB of the result is set to 0 (positive).\n    - If `b` is greater than `a`, the result is `b - a`. The MSB of the result is set according to whether the result is zero or negative.\n\n3. Precision:\n    - The operands `a` and `b` consist of integer and fractional parts, with the fractional part determined by parameter `Q`.\n    - The precision is consistent across both inputs and the output to ensure accurate fixed-point arithmetic.\n\n4. Overflow Handling:\n    - Overflow is managed internally by observing the MSB to ensure the result fits within the N-bit range.\n\nGive me the complete code.", "gloden_code": "module fixed_point_adder #(\n\t//Parameterized values\n\tparameter Q = 15,\n\tparameter N = 32\n\t)\n\t(\n    input [N-1:0] a,\n    input [N-1:0] b,\n    output [N-1:0] c\n    );\n\nreg [N-1:0] res;\n\nassign c = res;\n\nalways @(a,b) begin\n\t// both negative or both positive\n\tif(a[N-1] == b[N-1]) begin\t\t\t\t\n\t\tres[N-2:0] = a[N-2:0] + b[N-2:0];\t \t\n\t\tres[N-1] = a[N-1];\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  \n\t\tend\t\t\t\t\t\t\t\t\t\t\t\t\n\t//\tone of them is negative...\n\telse if(a[N-1] == 0 && b[N-1] == 1) begin\t\t\n\t\tif( a[N-2:0] > b[N-2:0] ) begin\t\t\t\t\t\n\t\t\tres[N-2:0] = a[N-2:0] - b[N-2:0];\t\t\t\n\t\t\tres[N-1] = 0;\t\t\t\t\t\t\t\t\t\t\n\t\t\tend\n\t\telse begin\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\tres[N-2:0] = b[N-2:0] - a[N-2:0];\t\t\t\n\t\t\tif (res[N-2:0] == 0)\n\t\t\t\tres[N-1] = 0;\t\t\t\t\t\t\t\t\t\t\n\t\t\telse\n\t\t\t\tres[N-1] = 1;\t\t\t\t\t\t\t\t\t\t\n\t\t\tend\n\t\tend\n\telse begin\t\t\t\t\t\t\t\t\t\t\t\t\n\t\tif( a[N-2:0] > b[N-2:0] ) begin\t\t\t\t\t\n\t\t\tres[N-2:0] = a[N-2:0] - b[N-2:0];\t\t\t\n\t\t\tif (res[N-2:0] == 0)\n\t\t\t\tres[N-1] = 0;\t\t\t\t\t\t\t\t\t\t\n\t\t\telse\n\t\t\t\tres[N-1] = 1;\t\t\t\t\t\t\t\t\t\t\n\t\t\tend\n\t\telse begin\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\tres[N-2:0] = b[N-2:0] - a[N-2:0];\t\t\t\n\t\t\tres[N-1] = 0;\t\t\t\t\t\t\t\t\t\t\n\t\t\tend\n\t\tend\n\tend\nendmodule"}
{"task_id": "fixed_point_substractor", "prompt": "Please act as a professional Verilog designer.\n\nImplement a module of a fixed-point subtractor for precise arithmetic operations with fixed precision.\n\nModule name:\n    fixed_point_subtractor\n\nParameterized values:\n    Q: Represents the number of fractional bits in the fixed-point representation.\n    N: Represents the total number of bits (both integer and fractional) used for inputs and outputs.\n\nInput ports:\n    a [N-1:0]: First N-bit fixed-point input operand.\n    b [N-1:0]: Second N-bit fixed-point input operand.\n\nOutput ports:\n\n    c [N-1:0]: N-bit output representing the result of the fixed-point subtraction.\nInternal registers:\n    res [N-1:0]: N-bit register used to store the result of the subtraction operation.\n\nImplementation:\n    Same Sign Subtraction: When the signs of a and b are the same, their fractional and integer parts are subtracted. The sign of the result will be the same as the inputs.\n\nDifferent Sign Subtraction:\n    If a is positive and b is negative, the absolute values of a and b are added. The result will have a positive sign if a is greater than b, and a negative sign otherwise.\n    If a is negative and b is positive, the same logic applies, with the result's sign depending on the relative sizes of a and b.\n\nHandling Zero: \n    When the result is zero, the sign bit is explicitly set to 0 to handle this edge case.\n\nPrecision: \n    The fixed-point precision is defined by the parameters Q (fractional bits) and N (total bits). This ensures that the subtraction is performed accurately while maintaining the necessary precision for both integer and fractional parts.\n\nGive me the complete code.", "gloden_code": "module fixed_point_subtractor #(\n\tparameter Q = 15,\n\tparameter N = 32\n\t)\n\t(\n    input [N-1:0] a,\n    input [N-1:0] b,\n    output [N-1:0] c\n    );\n\nreg [N-1:0] res;\n\nassign c = res;\n\nalways @(a,b) begin\n\t// both negative or both positive\n\tif(a[N-1] == b[N-1]) begin\t\t\t\t\t\n\t\tres[N-2:0] = a[N-2:0] - b[N-2:0];\t\t\n\t\tres[N-1] = a[N-1];\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\tend\t\t\t\t\t\t\t\t\t\t\t\t\n\t//\tone of them is negative\n\telse if(a[N-1] == 0 && b[N-1] == 1) begin\t\t\n\t\tif( a[N-2:0] > b[N-2:0] ) begin\t\t\t\t\t\n\t\t\tres[N-2:0] = a[N-2:0] + b[N-2:0];\t\t\t\n\t\t\tres[N-1] = 0;\t\t\t\t\t\t\t\t\t\t\n\t\t\tend\n\t\telse begin\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\tres[N-2:0] = b[N-2:0] + a[N-2:0];\t\t\n\t\t\tif (res[N-2:0] == 0)\n\t\t\t\tres[N-1] = 0;\t\t\t\t\t\t\t\t\t\n\t\t\telse\n\t\t\t\tres[N-1] = 1;\t\t\t\t\t\t\t\t\t\n\t\t\tend\n\t\tend\n\telse begin\t\t\t\t\t\t\t\t\t\t\t\t\n\t\tif( a[N-2:0] > b[N-2:0] ) begin\t\t\t\t\t\n\t\t\tres[N-2:0] = a[N-2:0] + b[N-2:0];\t\t\t\n\t\t\tif (res[N-2:0] == 0)\n\t\t\t\tres[N-1] = 0;\t\t\t\t\t\t\t\t\t\t\n\t\t\telse\n\t\t\t\tres[N-1] = 1;\t\t\t\t\t\t\t\t\t\t\n\t\t\tend\n\t\telse begin\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\tres[N-2:0] = b[N-2:0] + a[N-2:0];\t\t\t\n\t\t\tres[N-1] = 0;\t\t\t\t\t\t\t\t\t\t\n\t\t\tend\n\t\tend\n\tend\nendmodule"}
{"task_id": "float_multi", "prompt": "Please act as a professional Verilog designer.\n\nImplement a module of a 32-bit floating-point multiplier for IEEE-754 standard single-precision arithmetic.\nThe float_multi module is designed to perform high-precision multiplication of 32-bit single-precision floating-point numbers, following the IEEE 754 standard. This module enables accurate arithmetic operations essential for various computational applications.\n\nModule name:\nfloat_multi\n\nInput ports:\n    clk (input): Clock signal for synchronization.\n    rst (input): Reset signal (active high).\n    a (input [31:0]): First operand in IEEE 754 format.\n    b (input [31:0]): Second operand in IEEE 754 format.\n\nOutput ports:\n    z (output reg [31:0]): Result of the multiplication in IEEE 754 format.\n\nInternal signals:\n    counter (reg [2:0]): Cycle counter for operation sequencing.\n    a_mantissa, b_mantissa, z_mantissa (reg [23:0]): Mantissas of input and output numbers.\n    a_exponent, b_exponent, z_exponent (reg [9:0]): Exponents of input and output numbers.\n    a_sign, b_sign, z_sign (reg): Sign bits for inputs and output.\n    product (reg [49:0]): Intermediate product of the mantissas.\n    guard_bit, round_bit, sticky (reg): Rounding control bits.\n\nImplementation:\n    -Initialization: The counter is reset to zero on the rst signal.\n    -Input Processing: The mantissas, exponents, and sign bits of inputs a and b are extracted during the first clock cycle.\n    -Special Cases Handling: The module identifies special cases like NaN (Not a Number) and infinity based on the inputs.\n    -Normalization: Mantissas are normalized if needed.\n    -Multiplication: The mantissas are multiplied, combining the signs and adjusting the exponents.\n    -Rounding and Adjustment: The module rounds the result and adjusts the exponent to ensure accurate representation.\n    -Output Generation: The final result is formatted in IEEE 754 standard, addressing overflow and underflow scenarios.\n\nGive me the complete code.", "gloden_code": "module float_multi(clk, rst, a, b, z);\n\ninput clk, rst;\ninput [31:0] a, b;\noutput reg [31:0] z;\n\nreg [2:0] counter;\n\nreg [23:0] a_mantissa, b_mantissa, z_mantissa; //Mantissa\nreg [9:0] a_exponent, b_exponent, z_exponent; //EXPONENTS\nreg a_sign, b_sign, z_sign; // Sign_Bit\n\nreg [49:0] product;\n\nreg guard_bit, round_bit, sticky;\n\nalways @(posedge clk or rst) begin\n\tif(rst)\n\t\tcounter <= 0;\n\telse\n\t\tcounter <= counter + 1;\nend\n\n\nalways @(counter) begin\n\tif(counter == 3'b001) begin \n\t//IEEE 754 Representation\n\t\ta_mantissa <= a[22:0];\n\t        b_mantissa <= b[22:0];\n\t        a_exponent <= a[30:23] - 127;\n        \tb_exponent <= b[30:23] - 127;\n\t        a_sign <= a[31];\n        \tb_sign <= b[31];\n        end\nend\n\n\nalways @(counter) begin\n\tif(counter == 3'b010) begin\n\t\tif ((a_exponent == 128 && a_mantissa != 0) || (b_exponent == 128 && b_mantissa != 0)) begin //Not a Number \n          \t\tz[31] <= 1;\n          \t\tz[30:23] <= 255;\n          \t\tz[22] <= 1;\n          \t\tz[21:0] <= 0;\n          \tend\n          \telse if (a_exponent == 128) begin //INF A\n          \t\tz[31] <= a_sign ^ b_sign;\n          \t\tz[30:23] <= 255;\n          \t\tz[22:0] <= 0;\n          \t\tif (($signed(b_exponent) == -127) && (b_mantissa == 0)) begin //NAN IF B = 0\n            \t\t\tz[31] <= 1;\n            \t\t\tz[30:23] <= 255;\n\t        \t    \tz[22] <= 1;\n        \t\t    \tz[21:0] <= 0;\n          \t\tend\n          \tend\n          \telse if (b_exponent == 128) begin //INF B\n          \t\tz[31] <= a_sign ^ b_sign;\n          \t\tz[30:23] <= 255;\n          \t\tz[22:0] <= 0;\n          \t\tif (($signed(a_exponent) == -127) && (a_mantissa == 0)) begin //NAN IF A = 0\n            \t\t\tz[31] <= 1;\n            \t\t\tz[30:23] <= 255;\n\t        \t    \tz[22] <= 1;\n        \t\t    \tz[21:0] <= 0;\n          \t\tend\n          \tend\n\t          else if (($signed(a_exponent) == -127) && (a_mantissa == 0)) begin //0 if A = 0\n       \t\t z[31] <= a_sign ^ b_sign; //Sign_Bit \n       \t\t z[30:23] <= 0; \n        \t \t z[22:0] <= 0;\n        \t  end\n        \t  else if (($signed(b_exponent) == -127) && (b_mantissa == 0)) begin //0 if B = 0\n        \t \t z[31] <= a_sign ^ b_sign;\n        \t  \t z[30:23] <= 0;\n        \t  \t z[22:0] <= 0;\n        \t  end\n        \t  else begin\n        \t  \tif ($signed(a_exponent) == -127) //DENORMALIZING A\n        \t    \t\ta_exponent <= -126;\n        \t  \telse\n        \t    \t\ta_mantissa[23] <= 1;\n            \t\t\n        \t    \tif ($signed(b_exponent) == -127) //DENORMALIZING B\n        \t    \t\tb_exponent <= -126;\n        \t  \telse\n        \t    \t\tb_mantissa[23] <= 1;\n        \t  end\n        end\nend\n\n\nalways @(counter) begin\n\tif(counter == 3'b011) begin\n\t\tif (~a_mantissa[23]) begin //NORMALIZE A\n\t        \ta_mantissa <= a_mantissa << 1;\n\t       \ta_exponent <= a_exponent - 1;\n\t        end\n\t        if (~b_mantissa[23]) begin //NORMALIZE B\n\t        \tb_mantissa <= b_mantissa << 1;\n\t       \tb_exponent <= b_exponent - 1;\n\t        end\n\tend\nend\n\n\nalways @(counter) begin\n\tif(counter == 3'b100) begin //GET THE SIGNS XORED and EXPONENTS ADDED and GET THE INTERMEDIATE MANTISSA MULTIPLICATION\n\t\tz_sign <= a_sign ^ b_sign;\n\t        z_exponent <= a_exponent + b_exponent + 1 ;\n        \tproduct <= a_mantissa * b_mantissa * 4;\n\tend\nend\n\n\nalways @(counter) begin\n\tif(counter == 3'b101) begin\n\t\tz_mantissa <= product[49:26];\n       \tguard_bit <= product[25];\n      \t\tround_bit <= product[24];\n      \t\tsticky <= (product[23:0] != 0);\n\tend\nend\n\nalways @(counter) begin\n\tif(counter == 3'b110) begin\n\t\tif ($signed(z_exponent) < -126) begin\n        \t\tz_exponent <= z_exponent + (-126 -$signed(z_exponent));\n    \t\t\tz_mantissa <= z_mantissa >> (-126 -$signed(z_exponent));\n     \t\t\tguard_bit <= z_mantissa[0];\n       \t\tround_bit <= guard_bit;\n       \t\tsticky <= sticky | round_bit;\n        \tend\n\t\telse if (z_mantissa[23] == 0) begin\n        \t\tz_exponent <= z_exponent - 1;\n        \t\tz_mantissa <= z_mantissa << 1;\n        \t\tz_mantissa[0] <= guard_bit;\n        \t\tguard_bit <= round_bit;\n        \t\tround_bit <= 0;\n        \tend\n\t        else if (guard_bit && (round_bit | sticky | z_mantissa[0])) begin\n        \t\tz_mantissa <= z_mantissa + 1;\n          \t\tif (z_mantissa == 24'hffffff)\n            \t\t\tz_exponent <=z_exponent + 1;\n        \tend\n        end\nend\n\nalways @(counter) begin\n\tif(counter == 3'b111) begin\n\t\tz[22:0] <= z_mantissa[22:0];\n        \tz[30:23] <= z_exponent[7:0] + 127;\n        \tz[31] <= z_sign;\n        \tif ($signed(z_exponent) == -126 && z_mantissa[23] == 0)\n          \t\tz[30:23] <= 0;\n        \tif ($signed(z_exponent) > 127) begin //IF OVERFLOW RETURN INF\n          \t\tz[22:0] <= 0;\n          \t\tz[30:23] <= 255;\n          \t\tz[31] <= z_sign;\n        \tend\n\tend\nend\n\n\nendmodule"}
{"task_id": "sub_64bit", "prompt": "Please act as a professional Verilog designer.\n\nImplement a module of a 64-bit subtractor with overflow checking for high-precision arithmetic operations. \n\nModule name:  \n    sub_64bit               \nInput ports:\n    A [63:0]: First 64-bit input operand (representing a large signed integer).\n    B [63:0]: Second 64-bit input operand (representing a large signed integer to be subtracted from A).\nOutput ports:\n    result [63:0]: 64-bit output representing the difference of the two operands (A - B).\n    overflow: 1-bit output indicating whether an overflow occurred during the subtraction operation.\n\nImplementation:\nSubtraction: The module performs binary subtraction of A and B to obtain the result.\nOverflow Detection: The module checks for overflow conditions by examining the sign bits of A, B, and the result. \n- Positive overflow occurs when a positive number (A) is subtracted by a negative number (B) and the result is negative.\n- Negative overflow occurs when a negative number (A) is subtracted by a positive number (B) and the result is positive.\n\nThe overflow flag is set to 1 if an overflow condition is detected; otherwise, it is set to 0.\n\nGive me the complete code.", "gloden_code": "module sub_64bit(\n  input [63:0] A,\n  input [63:0] B,\n  output reg [63:0] result,\n  output reg overflow\n);\n  always @(*) begin\n    result = A - B;\n\n    // Overflow happens when the sign of A and B are different, but the sign of result matches B\n    if ((A[63] != B[63]) && (result[63] != A[63])) begin\n      overflow = 1;\n    end else begin\n      overflow = 0;\n    end\n  end\n\nendmodule"}
