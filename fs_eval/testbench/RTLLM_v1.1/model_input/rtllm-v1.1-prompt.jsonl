{"task_id": "alu", "prompt": "`timescale 1ns / 1ps\n\nmodule alu(\n    input [31:0] a,\n    input [31:0] b,\n    input [5:0] aluc,\n    output [31:0] r,\n    output zero,\n    output carry,\n    output negative,\n    output overflow,\n    output flag\n    );\n    "}
{"task_id": "multi_pipe_4bit", "prompt": "`timescale 1ns/1ns\nmodule multi_pipe_4bit#(\n\tparameter size = 4\n)(\n\tinput \t\t\t\t\t\tclk \t\t,   \n\tinput \t\t\t\t\t\trst_n\t\t,\n\tinput\t[size-1:0]\t\t\tmul_a\t\t,\n\tinput\t[size-1:0]\t\t\tmul_b\t\t,\n \n \toutput\treg\t[size*2-1:0]\tmul_out\t\t\n);\n"}
{"task_id": "multi_booth_8bit", "prompt": "`timescale 1ns / 1ps\n\nmodule multi_booth_8bit (p, rdy, clk, reset, a, b);\n"}
{"task_id": "calendar", "prompt": "module calendar(CLK,RST,Hours,Mins,Secs);\n"}
{"task_id": "traffic_light", "prompt": "`timescale 1ns/1ns\n\nmodule traffic_light\n    (\n\t\tinput rst_n, \n      input clk, \n      input pass_request,\n\t\t  output wire[7:0]clock,\n      output reg red,\n\t\t  output reg yellow,\n\t\t  output reg green\n    );\n\t"}
{"task_id": "edge_detect", "prompt": "`timescale 1ns/1ns\nmodule edge_detect(\n\tinput clk,\n\tinput rst_n,\n\tinput a,\n\t\n\toutput reg rise,\n\toutput reg down\n);\n"}
{"task_id": "RAM", "prompt": "module RAM (\n\tinput clk,\n\tinput rst_n,\n\t\n\tinput write_en,\n\tinput [7:0]write_addr,\n\tinput [5:0]write_data,\n\t\n\tinput read_en,\n\tinput [7:0]read_addr,\n\toutput reg [5:0]read_data\n);\n"}
{"task_id": "JC_counter", "prompt": "`timescale 1ns/1ns\n\nmodule JC_counter(\n   input                clk ,\n   input                rst_n,\n \n   output reg [63:0]     Q  \n);\n"}
{"task_id": "fsm", "prompt": "module fsm(IN,MATCH,CLK,RST);\n"}
{"task_id": "serial2parallel", "prompt": "module serial2parallel(\n\tinput clk,\n\tinput rst_n,\n\tinput din_serial,\n\tinput din_valid,\n\toutput reg [7:0]dout_parallel,\n\toutput reg dout_valid\n);\n"}
{"task_id": "adder_8bit", "prompt": "module adder_8bit(\n    input [7:0] a, b, \n    input cin, \n    output [7:0] sum, \n    output cout);"}
{"task_id": "asyn_fifo", "prompt": "`timescale 1ns/1ns\n\n/***************************************RAM*****************************************/\nmodule dual_port_RAM #(parameter DEPTH = 16,  parameter WIDTH = 8)\n(\n\t input wclk\t,\n\t input wenc\t,\n\t input [$clog2(DEPTH)-1:0] waddr  ,\n\t input [WIDTH-1:0] wdata ,\n\t input rclk\t,\n\t input renc\t,\n\t input [$clog2(DEPTH)-1:0] raddr ,\n\t output reg [WIDTH-1:0] rdata \t\t\n);\n\nreg [WIDTH-1:0] RAM_MEM [0:DEPTH-1];\n\nalways @(posedge wclk) begin\n\tif(wenc)\n\t\tRAM_MEM[waddr] <= wdata;\nend \n\nalways @(posedge rclk) begin\n\tif(renc)\n\t\trdata <= RAM_MEM[raddr];\nend \n\nendmodule  \n\n\n/**************************************AFIFO*****************************************/\nmodule asyn_fifo#(\n\tparameter\tWIDTH = 8,\n\tparameter \tDEPTH = 16\n)(\n\tinput \t\t\t\t\twclk\t, \n\tinput \t\t\t\t\trclk\t,   \n\tinput \t\t\t\t\twrstn\t,\n\tinput\t\t\t\t\trrstn\t,\n\tinput \t\t\t\t\twinc\t,\n\tinput \t\t\t \t\trinc\t,\n\tinput \t\t[WIDTH-1:0]\twdata\t,\n\n\toutput wire\t\t\t\twfull\t,\n\toutput wire\t\t\t\trempty\t,\n\toutput wire [WIDTH-1:0]\trdata\n);\n"}
{"task_id": "multi_pipe_8bit", "prompt": "module multi_pipe_8bit#(\n    parameter size = 8\n)(\n          clk,      \n          rst_n,       \n          mul_a,       \n          mul_b, \n          mul_en_in,\n \n          mul_en_out,      \n          mul_out    \n);\n"}
{"task_id": "multi_16bit", "prompt": "module multi_16bit(\n    input clk,          // Chip clock signal.\n    input rst_n,        // Active-low reset signal. Defined as 0 for chip reset; defined as 1 for reset signal inactive.\n    input start,        // Chip enable signal. \n    input [15:0] ain,   // Input a (multiplicand) with a data width of 16 bits.\n    input [15:0] bin,   // Input b (multiplier) with a data width of 16 bits.\n\n    output [31:0] yout, // Product output with a data width of 32 bits.\n    output done         // Chip output flag signal. Defined as 1 indicates multiplication operation completion.\n);\n"}
{"task_id": "radix2_div", "prompt": "`timescale 1ns/1ps\nmodule radix2_div(\n    input wire clk,\n    input wire rst,\n    input wire [7:0] dividend,    \n    input wire [7:0] divisor,    \n    input wire sign,       \n\n    input wire opn_valid,   \n    output reg res_valid,   \n    input wire res_ready,   \n    output wire [15:0] result\n);\n"}
{"task_id": "right_shifter", "prompt": "module right_shifter(clk, q,d);  \n"}
{"task_id": "adder_pipe_64bit", "prompt": "module adder_pipe_64bit\n#(\n    parameter DATA_WIDTH = 64,\n    parameter STG_WIDTH = 16\n)\n(\n    input clk,\n    input rst_n,\n    input i_en,\n    input [DATA_WIDTH-1:0] adda,\n    input [DATA_WIDTH-1:0] addb,\n    output [DATA_WIDTH:0] result,\n    output reg o_en\n);\n"}
{"task_id": "div_16bit", "prompt": "module div_16bit(\n    input wire [15:0] A,\n    input wire [7:0] B,\n    output wire [15:0] result,\n    output wire [15:0] odd\n    );\n"}
{"task_id": "freq_div", "prompt": "module freq_div (CLK_in,CLK_50,CLK_10,CLK_1,RST);\n"}
{"task_id": "counter_12", "prompt": "`timescale 1ns/1ps\nmodule counter_12 \n(\n  input rst_n,\n  input clk,\n  input valid_count,\n\n  output reg [3:0] out\n);\n"}
{"task_id": "signal_generator", "prompt": "module signal_generator(\n  input clk,\n  input rst_n,\n  output reg [4:0] wave\n);\n"}
{"task_id": "pulse_detect", "prompt": "`timescale 1ns/1ns\n\nmodule pulse_detect(    \n    input clk,\n    input rst_n,\n    input data_in,\n    output reg data_out\n);\n"}
{"task_id": "parallel2serial", "prompt": "`timescale 1ns/1ns\nmodule parallel2serial(\n\tinput wire clk  ,\n\tinput wire rst_n  ,\n\tinput wire [3:0]d ,\n\toutput wire valid_out ,\n\toutput wire dout\n\t);\n"}
{"task_id": "adder_16bit", "prompt": "module adder_16bit (\n    input wire [15:0] a,\n    input wire [15:0] b,\n    input wire Cin,\n    output wire [15:0] y,\n    output wire Co\n);\n "}
{"task_id": "pe", "prompt": "module pe(\n    input clk,\n    input rst,\n    input [31:0] a,\n    input [31:0] b,\n\n    output [31:0] c\n);\n"}
{"task_id": "adder_32bit", "prompt": "module adder_32bit(A,B,S,C32);\n"}
{"task_id": "synchronizer", "prompt": "module synchronizer(\n\tinput \t\t\t\tclk_a\t, \n\tinput \t\t\t\tclk_b\t,   \n\tinput \t\t\t\tarstn\t,\n\tinput\t\t\t\tbrstn   ,\n\tinput\t\t[3:0]\tdata_in\t,\n\tinput               data_en ,\n\n\toutput reg  [3:0] \tdataout\n);\n"}
{"task_id": "accu", "prompt": "`timescale 1ns/1ns\n\nmodule accu(\n    input               clk         ,   \n    input               rst_n       ,\n    input       [7:0]   data_in     ,\n    input               valid_in     ,\n \n    output  reg         valid_out     ,\n    output  reg [9:0]   data_out\n);"}
{"task_id": "width_8to16", "prompt": "`timescale 1ns/1ns\nmodule width_8to16(\n\tinput \t\t\t\t   clk \t\t,   \n\tinput \t\t\t\t   rst_n\t\t,\n\tinput\t\t\t\t      valid_in\t,\n\tinput\t   [7:0]\t\t   data_in\t,\n \n \toutput\treg\t\t\tvalid_out,\n\toutput   reg [15:0]\tdata_out\n);\n"}
